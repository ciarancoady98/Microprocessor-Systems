


ARM Macro Assembler    Page 1 


    1 00000000         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
    2 00000000         
    3 00000000         ; Timer Stuff -- UM, Table 173
    4 00000000         
    5 00000000 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
    6 00000000 E0008000 
                       T1      equ              0xE0008000
    7 00000000         
    8 00000000 00000000 
                       IR      equ              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
    9 00000000 00000004 
                       TCR     equ              4
   10 00000000 00000014 
                       MCR     equ              0x14
   11 00000000 00000018 
                       MR0     equ              0x18
   12 00000000         
   13 00000000 00000002 
                       TimerCommandReset
                               equ              2
   14 00000000 00000001 
                       TimerCommandRun
                               equ              1
   15 00000000 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   16 00000000 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   17 00000000 000000FF 
                       TimerResetAllInterrupts
                               equ              0xFF
   18 00000000         
   19 00000000         ; VIC Stuff -- UM, Table 41
   20 00000000 FFFFF000 
                       VIC     equ              0xFFFFF000  ; VIC Base Address
   21 00000000 00000010 
                       IntEnable
                               equ              0x10
   22 00000000 00000030 
                       VectAddr
                               equ              0x30
   23 00000000 00000100 
                       VectAddr0
                               equ              0x100
   24 00000000 00000200 
                       VectCtrl0
                               equ              0x200
   25 00000000         
   26 00000000 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   27 00000000 00000010 



ARM Macro Assembler    Page 2 


                       Timer0Mask
                               equ              1<<Timer0ChannelNumber 
                                                            ; UM, Table 63
   28 00000000 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   29 00000000         
   30 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   31 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   32 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   33 00000000         
   34 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   35 00000000 E0028004 
                       IO0SET  EQU              0XE0028004
   36 00000000 E002800C 
                       IO0CLR  EQU              0XE002800C
   37 00000000 E0028000 
                       IO0PIN  EQU              0XE0028000
   38 00000000         
   39 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   40 00000000                 IMPORT           main
   41 00000000         
   42 00000000                 EXPORT           start
   43 00000000         start
   44 00000000         ; initialisation code
   45 00000000         
   46 00000000         ; Initialise the VIC
   47 00000000 E59F0054        ldr              r0,=VIC     ; looking at you, V
                                                            IC!
   48 00000004         
   49 00000004 E59F1054        ldr              r1,=irqhan
   50 00000008 E5801100        str              r1,[r0,#VectAddr0] ; associate 
                                                            our interrupt handl
                                                            er with Vectored In
                                                            terrupt 0
   51 0000000C         
   52 0000000C E3A01024        mov              r1,#Timer0ChannelNumber+(1<<IRQ
slot_en)
   53 00000010 E5801200        str              r1,[r0,#VectCtrl0] ; make Timer
                                                             0 interrupts the s
                                                            ource of Vectored I
                                                            nterrupt 0
   54 00000014         
   55 00000014 E3A01010        mov              r1,#Timer0Mask
   56 00000018 E5801010        str              r1,[r0,#IntEnable] ; enable Tim
                                                            er 0 interrupts to 
                                                            be recognised by th
                                                            e VIC
   57 0000001C         
   58 0000001C E3A01000        mov              r1,#0
   59 00000020 E5801030        str              r1,[r0,#VectAddr] ; remove any 
                                                            pending interrupt (
                                                            may not be needed)
   60 00000024         



ARM Macro Assembler    Page 3 


   61 00000024         ; Initialise Timer 0
   62 00000024 E59F0038        ldr              r0,=T0      ; looking at you, T
                                                            imer 0!
   63 00000028         
   64 00000028 E3A01002        mov              r1,#TimerCommandReset
   65 0000002C E5801004        str              r1,[r0,#TCR]
   66 00000030         
   67 00000030 E3A010FF        mov              r1,#TimerResetAllInterrupts
   68 00000034 E5801000        str              r1,[r0,#IR]
   69 00000038         
   70 00000038 E59F1028        ldr              r1,=(14745600/200)-1 ; 5 ms = 1
                                                            /200 second
   71 0000003C E5801018        str              r1,[r0,#MR0]
   72 00000040         
   73 00000040 E3A01003        mov              r1,#TimerModeResetAndInterrupt
   74 00000044 E5801014        str              r1,[r0,#MCR]
   75 00000048         
   76 00000048 E3A01001        mov              r1,#TimerCommandRun
   77 0000004C E5801004        str              r1,[r0,#TCR]
   78 00000050         
   79 00000050         ;Intialise spsr for debugging
   80 00000050 E10F1000        mrs              r1, cpsr
   81 00000054 E16FF001        msr              spsr_cxsf, r1
   82 00000058         
   83 00000058         ;Branch to interrupt handler for debugging purposes
   84 00000058         ;b irqhan
   85 00000058 EAFFFFFE 
                       initLoop
                               B                initLoop
   86 0000005C         
   87 0000005C         ;thread 0
   88 0000005C FFFFF000 
              00000000 
              E0004000 
              00011FFF         AREA             blinky0, CODE, READONLY
   89 00000000         
   90 00000000         startBlinky0
   91 00000000 E59F1038        ldr              r1,=IO1DIR
   92 00000004 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   93 00000008 E5812000        str              r2,[r1]     ;make them outputs
   94 0000000C         
   95 0000000C         
   96 0000000C E59F1030        ldr              r1,=IO1SET
   97 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   98 00000014 E59F202C        ldr              r2,=IO1CLR
   99 00000018         ; r1 points to the SET register
  100 00000018         ; r2 points to the CLEAR register
  101 00000018         floop
  102 00000018 E3A00802        ldr              r0,=0x00020000 ;select P1.19--P
                                                            1.16
  103 0000001C E5820000        str              r0, [r2]
  104 00000020         ;delay for about a half second
  105 00000020 E59F4024        ldr              r4,=4000000
  106 00000024         ;ldr r4,=1
  107 00000024 E2544001 
                       dloop   subs             r4,r4,#1
  108 00000028 1AFFFFFD        bne              dloop



ARM Macro Assembler    Page 4 


  109 0000002C         
  110 0000002C         ;bl irqhan
  111 0000002C         
  112 0000002C E5810000        str              r0, [r1]
  113 00000030         ;delay for about a half second
  114 00000030 E59F4014        ldr              r4,=4000000
  115 00000034 E2544001 
                       dloop2  subs             r4,r4,#1
  116 00000038 1AFFFFFD        bne              dloop2
  117 0000003C EAFFFFF5        b                floop
  118 00000040         
  119 00000040         ;end blinky1
  120 00000040         
  121 00000040         
  122 00000040         ;thread 1
  123 00000040 E0028018 
              E0028014 
              E002801C 
              003D0900         AREA             blinky1, CODE, READONLY
  124 00000000         
  125 00000000         startBlinky1
  126 00000000         
  127 00000000 E59F1038        ldr              r1,=IO0DIR
  128 00000004 E3A02826        ldr              r2,=0X00260000 ;select P1.19--P
                                                            1.16
  129 00000008 E5812000        str              r2,[r1]     ;make them outputs
  130 0000000C         
  131 0000000C         
  132 0000000C E59F1030        ldr              r1,=IO0SET
  133 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  134 00000014 E59F202C        ldr              r2,=IO0CLR
  135 00000018         
  136 00000018         
  137 00000018         ; r1 points to the SET register
  138 00000018         ; r2 points to the CLEAR register
  139 00000018         floopb2
  140 00000018 E3A00602        ldr              r0,=0X00200000 ;select P1.19--P
                                                            1.16
  141 0000001C E5820000        str              r0, [r2]
  142 00000020         ;delay for about a half second
  143 00000020 E59F4024        ldr              r4,=4000000
  144 00000024 E2544001 
                       dloopb2 subs             r4,r4,#1
  145 00000028 1AFFFFFD        bne              dloopb2
  146 0000002C         
  147 0000002C         ;bl irqhan
  148 0000002C         
  149 0000002C E5810000        str              r0, [r1]
  150 00000030         ;delay for about a half second
  151 00000030 E59F4014        ldr              r4,=4000000
  152 00000034 E2544001 
                       dloopb22
                               subs             r4,r4,#1
  153 00000038 1AFFFFFD        bne              dloopb22
  154 0000003C EAFFFFF5        b                floopb2
  155 00000040         
  156 00000040         ;end blinky 2
  157 00000040         



ARM Macro Assembler    Page 5 


  158 00000040         ;interrupt stuff
  159 00000040 E0028008 
              E0028004 
              E002800C 
              003D0900         AREA             InterruptStuff, CODE, READONLY
  160 00000000         irqhan
  161 00000000         ;Setup the return address as we want to re-excute the in
                       terrupted instruction
  162 00000000 E24EE004        sub              lr,lr,#4
  163 00000004         ;Store the context of the thread we interrupted to the i
                       nterrupt stack
  164 00000004 E92D5FFF        stmfd            sp!,{r0-r12,lr}
  165 00000008         ;this is the body of the interrupt handler
  166 00000008         ;switching threads
  167 00000008 E59F00E4        ldr              r0, =CURRENTTHREAD
  168 0000000C E5901000        ldr              r1, [r0]
  169 00000010 E3710001        cmp              r1, #-1
  170 00000014 0A000003        beq              initialSwitch
  171 00000018 E3510000        cmp              r1, #0
  172 0000001C 0A000011        beq              switchToThread1
  173 00000020 E3510001        cmp              r1, #1
  174 00000024 0A00001C        beq              switchToThread0
  175 00000028         
  176 00000028         initialSwitch
  177 00000028         ;In here we setup the contexts and decide on which threa
                       d to run
  178 00000028         ;Initialise thread contexts 
  179 00000028         ;mov r0, sp ; save the current stack pointer
  180 00000028         ;Set thread 1 as the running thread
  181 00000028 E59F00C4        ldr              r0, =CURRENTTHREAD
  182 0000002C E3A01001        ldr              r1, =1
  183 00000030 E5801000        str              r1, [r0]
  184 00000034         ;load the initial values for thread 0
  185 00000034 E59FD0BC        ldr              sp, =THREAD0STACK
  186 00000038 E59FE0C0        ldr              lr, =startBlinky0
  187 0000003C E88D5FFF        stmia            sp, {r0-r12, lr}
  188 00000040         ;Store the spsr
  189 00000040 E59F00B4        ldr              r0, =THREAD0CPSR
  190 00000044 E14F1000        mrs              r1, spsr
  191 00000048 E5801000        str              r1, [r0]
  192 0000004C         ;load the initial values for thread 1
  193 0000004C E59FD0B0        ldr              sp, =THREAD1STACK
  194 00000050 E59FE0B4        ldr              lr, =startBlinky1
  195 00000054 E8AD5FFF        stmia            sp!, {r0-r12, lr}
  196 00000058         ;Store the spsr
  197 00000058 E59FC0A8        ldr              r12, =THREAD1CPSR
  198 0000005C E14F1000        mrs              r1, spsr
  199 00000060 E58C1000        str              r1, [r12]
  200 00000064         ;The stack pointer is now updated and ready
  201 00000064         ;to restore thread 1
  202 00000064 EA000019        b                restoreContext
  203 00000068         
  204 00000068         switchToThread1
  205 00000068         ;Update current thread to thread 1
  206 00000068 E59F0084        ldr              r0, =CURRENTTHREAD
  207 0000006C E3A01001        ldr              r1, =1
  208 00000070 E5801000        str              r1, [r0]
  209 00000074         ;Restore the context of the last thread from interrupt s
                       tack



ARM Macro Assembler    Page 6 


  210 00000074 E8BD5FFF        ldmfd            sp!, {r0-r12, lr}
  211 00000078         ;Save the context of the interrrupted thread to its stac
                       k
  212 00000078 E59FD078        ldr              sp, =THREAD0STACK
  213 0000007C E88D5FFF        stmia            sp, {r0-r12, lr}
  214 00000080         ;Store the spsr
  215 00000080 E59F0074        ldr              r0, =THREAD0CPSR
  216 00000084 E14F1000        mrs              r1, spsr
  217 00000088 E5801000        str              r1, [r0]
  218 0000008C         ;Setup the stack pointer for restore of thread 1
  219 0000008C E59FD070        ldr              sp, =THREAD1STACK
  220 00000090 E28DD038        add              sp, sp, #14*4
  221 00000094 E59FC06C        ldr              r12, =THREAD1CPSR
  222 00000098 EA00000C        b                restoreContext
  223 0000009C         
  224 0000009C         switchToThread0
  225 0000009C         ;Update current thread to thread 0
  226 0000009C E59F0050        ldr              r0, =CURRENTTHREAD
  227 000000A0 E3A01000        ldr              r1, =0
  228 000000A4 E5801000        str              r1, [r0]
  229 000000A8         ;Restore the context of the last thread from interrupt s
                       tack
  230 000000A8 E8BD5FFF        ldmfd            sp!, {r0-r12, lr}
  231 000000AC         ;Save the context of the interrrupted thread to its stac
                       k
  232 000000AC E59FD050        ldr              sp, =THREAD1STACK
  233 000000B0 E88D5FFF        stmia            sp, {r0-r12, lr}
  234 000000B4         ;Store the spsr
  235 000000B4 E59F004C        ldr              r0, =THREAD1CPSR
  236 000000B8 E14F1000        mrs              r1, spsr
  237 000000BC E4801004        str              r1, [r0], #4
  238 000000C0         ;Setup the stack pointer for restore of thread 0
  239 000000C0 E59FD030        ldr              sp, =THREAD0STACK
  240 000000C4 E28DD038        add              sp, sp, #14*4
  241 000000C8 E59FC02C        ldr              r12, =THREAD0CPSR
  242 000000CC EAFFFFFF        b                restoreContext
  243 000000D0         
  244 000000D0         restoreContext
  245 000000D0         
  246 000000D0         ;this is where we stop the timer from making the interru
                       pt request to the VIC
  247 000000D0         ;i.e. we 'acknowledge' the interrupt
  248 000000D0 E59F0064        ldr              r0,=T0
  249 000000D4 E3A01001        mov              r1,#TimerResetTimer0Interrupt
  250 000000D8 E5801000        str              r1,[r0,#IR] ; remove MR0 interr
                                                            upt request from ti
                                                            mer
  251 000000DC         
  252 000000DC         ;here we stop the VIC from making the interrupt request 
                       to the CPU:
  253 000000DC E59F005C        ldr              r0,=VIC
  254 000000E0 E3A01000        mov              r1,#0
  255 000000E4 E5801030        str              r1,[r0,#VectAddr] ; reset VIC
  256 000000E8         
  257 000000E8         ;Restore the spsr from memory to the cpsr
  258 000000E8 E59C0000        ldr              r0, [R12]
  259 000000EC E16FF000        msr              spsr_cxsf, r0
  260 000000F0         ;Resume the selected thread and return to the user mode
  261 000000F0 E95D9FFF        ldmdb            sp,{r0-r12,pc}^



ARM Macro Assembler    Page 7 


  262 000000F4         
  263 000000F4         
  264 000000F4 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0004000 
              FFFFF000         AREA             processStorage, READWRITE
  265 00000000         
  266 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 THREAD0STACK
                               SPACE            15*4
  267 0000003C 00 00 00 
              00       THREAD0CPSR
                               SPACE            4
  268 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 THREAD1STACK
                               SPACE            15*4
  269 0000007C 00 00 00 
              00       THREAD1CPSR
                               SPACE            4
  270 00000080 FFFFFFFF 
                       CURRENTTHREAD
                               DCD              -1
  271 00000084                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 39 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
initLoop 00000058

Symbol: initLoop
   Definitions
      At line 85 in file App.s
   Uses
      At line 85 in file App.s
Comment: initLoop used once
start 00000000

Symbol: start
   Definitions
      At line 43 in file App.s
   Uses
      At line 42 in file App.s
Comment: start used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

blinky0 00000000

Symbol: blinky0
   Definitions
      At line 88 in file App.s
   Uses
      None
Comment: blinky0 unused
dloop 00000024

Symbol: dloop
   Definitions
      At line 107 in file App.s
   Uses
      At line 108 in file App.s
Comment: dloop used once
dloop2 00000034

Symbol: dloop2
   Definitions
      At line 115 in file App.s
   Uses
      At line 116 in file App.s
Comment: dloop2 used once
floop 00000018

Symbol: floop
   Definitions
      At line 101 in file App.s
   Uses
      At line 117 in file App.s
Comment: floop used once
startBlinky0 00000000

Symbol: startBlinky0
   Definitions
      At line 90 in file App.s
   Uses
      At line 186 in file App.s
Comment: startBlinky0 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

blinky1 00000000

Symbol: blinky1
   Definitions
      At line 123 in file App.s
   Uses
      None
Comment: blinky1 unused
dloopb2 00000024

Symbol: dloopb2
   Definitions
      At line 144 in file App.s
   Uses
      At line 145 in file App.s
Comment: dloopb2 used once
dloopb22 00000034

Symbol: dloopb22
   Definitions
      At line 152 in file App.s
   Uses
      At line 153 in file App.s
Comment: dloopb22 used once
floopb2 00000018

Symbol: floopb2
   Definitions
      At line 139 in file App.s
   Uses
      At line 154 in file App.s
Comment: floopb2 used once
startBlinky1 00000000

Symbol: startBlinky1
   Definitions
      At line 125 in file App.s
   Uses
      At line 194 in file App.s
Comment: startBlinky1 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 159 in file App.s
   Uses
      None
Comment: InterruptStuff unused
initialSwitch 00000028

Symbol: initialSwitch
   Definitions
      At line 176 in file App.s
   Uses
      At line 170 in file App.s
Comment: initialSwitch used once
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 160 in file App.s
   Uses
      At line 49 in file App.s
Comment: irqhan used once
restoreContext 000000D0

Symbol: restoreContext
   Definitions
      At line 244 in file App.s
   Uses
      At line 202 in file App.s
      At line 222 in file App.s
      At line 242 in file App.s

switchToThread0 0000009C

Symbol: switchToThread0
   Definitions
      At line 224 in file App.s
   Uses
      At line 174 in file App.s
Comment: switchToThread0 used once
switchToThread1 00000068

Symbol: switchToThread1
   Definitions
      At line 204 in file App.s
   Uses
      At line 172 in file App.s
Comment: switchToThread1 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CURRENTTHREAD 00000080

Symbol: CURRENTTHREAD
   Definitions
      At line 270 in file App.s
   Uses
      At line 167 in file App.s
      At line 181 in file App.s
      At line 206 in file App.s
      At line 226 in file App.s

THREAD0CPSR 0000003C

Symbol: THREAD0CPSR
   Definitions
      At line 267 in file App.s
   Uses
      At line 189 in file App.s
      At line 215 in file App.s
      At line 241 in file App.s

THREAD0STACK 00000000

Symbol: THREAD0STACK
   Definitions
      At line 266 in file App.s
   Uses
      At line 185 in file App.s
      At line 212 in file App.s
      At line 239 in file App.s

THREAD1CPSR 0000007C

Symbol: THREAD1CPSR
   Definitions
      At line 269 in file App.s
   Uses
      At line 197 in file App.s
      At line 221 in file App.s
      At line 235 in file App.s

THREAD1STACK 00000040

Symbol: THREAD1STACK
   Definitions
      At line 268 in file App.s
   Uses
      At line 193 in file App.s
      At line 219 in file App.s
      At line 232 in file App.s

processStorage 00000000

Symbol: processStorage
   Definitions
      At line 264 in file App.s
   Uses
      None
Comment: processStorage unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 36 in file App.s
   Uses
      At line 134 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 34 in file App.s
   Uses
      At line 127 in file App.s
Comment: IO0DIR used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 37 in file App.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 35 in file App.s
   Uses
      At line 132 in file App.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 32 in file App.s
   Uses
      At line 98 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 30 in file App.s
   Uses
      At line 91 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 31 in file App.s
   Uses
      At line 96 in file App.s
Comment: IO1SET used once
IR 00000000

Symbol: IR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 8 in file App.s
   Uses
      At line 68 in file App.s
      At line 250 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 28 in file App.s
   Uses
      At line 52 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 21 in file App.s
   Uses
      At line 56 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 10 in file App.s
   Uses
      At line 74 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 11 in file App.s
   Uses
      At line 71 in file App.s
Comment: MR0 used once
T0 E0004000

Symbol: T0
   Definitions
      At line 5 in file App.s
   Uses
      At line 62 in file App.s
      At line 248 in file App.s

T1 E0008000

Symbol: T1
   Definitions
      At line 6 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 9 in file App.s
   Uses
      At line 65 in file App.s
      At line 77 in file App.s

Timer0ChannelNumber 00000004

Symbol: Timer0ChannelNumber
   Definitions
      At line 26 in file App.s
   Uses
      At line 27 in file App.s
      At line 52 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 27 in file App.s
   Uses
      At line 55 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 13 in file App.s
   Uses
      At line 64 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 14 in file App.s
   Uses
      At line 76 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 15 in file App.s
   Uses
      At line 73 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF

Symbol: TimerResetAllInterrupts
   Definitions
      At line 17 in file App.s
   Uses
      At line 67 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 16 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 249 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions
      At line 20 in file App.s
   Uses
      At line 47 in file App.s
      At line 253 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 22 in file App.s
   Uses
      At line 59 in file App.s
      At line 255 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 23 in file App.s
   Uses
      At line 50 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 24 in file App.s
   Uses
      At line 53 in file App.s
Comment: VectCtrl0 used once
26 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 40 in file App.s
   Uses
      None
Comment: main unused
1 symbol
393 symbols in table
