


ARM Macro Assembler    Page 1 


    1 00000000         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
    2 00000000         
    3 00000000         ; Timer Stuff -- UM, Table 173
    4 00000000         
    5 00000000 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
    6 00000000 E0008000 
                       T1      equ              0xE0008000
    7 00000000         
    8 00000000 00000000 
                       IR      equ              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
    9 00000000 00000004 
                       TCR     equ              4
   10 00000000 00000014 
                       MCR     equ              0x14
   11 00000000 00000018 
                       MR0     equ              0x18
   12 00000000         
   13 00000000 00000002 
                       TimerCommandReset
                               equ              2
   14 00000000 00000001 
                       TimerCommandRun
                               equ              1
   15 00000000 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   16 00000000 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   17 00000000 000000FF 
                       TimerResetAllInterrupts
                               equ              0xFF
   18 00000000         
   19 00000000         ; VIC Stuff -- UM, Table 41
   20 00000000 FFFFF000 
                       VIC     equ              0xFFFFF000  ; VIC Base Address
   21 00000000 00000010 
                       IntEnable
                               equ              0x10
   22 00000000 00000030 
                       VectAddr
                               equ              0x30
   23 00000000 00000100 
                       VectAddr0
                               equ              0x100
   24 00000000 00000200 
                       VectCtrl0
                               equ              0x200
   25 00000000         
   26 00000000 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   27 00000000 00000010 



ARM Macro Assembler    Page 2 


                       Timer0Mask
                               equ              1<<Timer0ChannelNumber 
                                                            ; UM, Table 63
   28 00000000 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   29 00000000         
   30 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   31 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   32 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   33 00000000         
   34 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   35 00000000 E0028004 
                       IO0SET  EQU              0XE0028004
   36 00000000 E002800C 
                       IO0CLR  EQU              0XE002800C
   37 00000000 E0028000 
                       IO0PIN  EQU              0XE0028000
   38 00000000         
   39 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   40 00000000                 IMPORT           main
   41 00000000         
   42 00000000                 EXPORT           start
   43 00000000         start
   44 00000000         ; initialisation code
   45 00000000         
   46 00000000         ; Initialise the VIC
   47 00000000 E59F004C        ldr              r0,=VIC     ; looking at you, V
                                                            IC!
   48 00000004         
   49 00000004 E59F104C        ldr              r1,=irqhan
   50 00000008 E5801100        str              r1,[r0,#VectAddr0] ; associate 
                                                            our interrupt handl
                                                            er with Vectored In
                                                            terrupt 0
   51 0000000C         
   52 0000000C E3A01024        mov              r1,#Timer0ChannelNumber+(1<<IRQ
slot_en)
   53 00000010 E5801200        str              r1,[r0,#VectCtrl0] ; make Timer
                                                             0 interrupts the s
                                                            ource of Vectored I
                                                            nterrupt 0
   54 00000014         
   55 00000014 E3A01010        mov              r1,#Timer0Mask
   56 00000018 E5801010        str              r1,[r0,#IntEnable] ; enable Tim
                                                            er 0 interrupts to 
                                                            be recognised by th
                                                            e VIC
   57 0000001C         
   58 0000001C E3A01000        mov              r1,#0
   59 00000020 E5801030        str              r1,[r0,#VectAddr] ; remove any 
                                                            pending interrupt (
                                                            may not be needed)
   60 00000024         



ARM Macro Assembler    Page 3 


   61 00000024         ; Initialise Timer 0
   62 00000024 E59F0030        ldr              r0,=T0      ; looking at you, T
                                                            imer 0!
   63 00000028         
   64 00000028 E3A01002        mov              r1,#TimerCommandReset
   65 0000002C E5801004        str              r1,[r0,#TCR]
   66 00000030         
   67 00000030 E3A010FF        mov              r1,#TimerResetAllInterrupts
   68 00000034 E5801000        str              r1,[r0,#IR]
   69 00000038         
   70 00000038 E59F1020        ldr              r1,=(14745600/200)-1 ; 5 ms = 1
                                                            /200 second
   71 0000003C E5801018        str              r1,[r0,#MR0]
   72 00000040         
   73 00000040 E3A01003        mov              r1,#TimerModeResetAndInterrupt
   74 00000044 E5801014        str              r1,[r0,#MCR]
   75 00000048         
   76 00000048 E3A01001        mov              r1,#TimerCommandRun
   77 0000004C E5801004        str              r1,[r0,#TCR]
   78 00000050         
   79 00000050         ;Branch to interrupt handler for debugging purposes
   80 00000050         ;b irqhan
   81 00000050 EAFFFFFE 
                       initLoop
                               B                initLoop
   82 00000054         
   83 00000054         ;thread 0
   84 00000054 FFFFF000 
              00000000 
              E0004000 
              00011FFF         AREA             blinky0, CODE, READONLY
   85 00000000         
   86 00000000         startBlinky0
   87 00000000 E59F1038        ldr              r1,=IO1DIR
   88 00000004 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   89 00000008 E5812000        str              r2,[r1]     ;make them outputs
   90 0000000C         
   91 0000000C         
   92 0000000C E59F1030        ldr              r1,=IO1SET
   93 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   94 00000014 E59F202C        ldr              r2,=IO1CLR
   95 00000018         ; r1 points to the SET register
   96 00000018         ; r2 points to the CLEAR register
   97 00000018         floop
   98 00000018 E3A00801        ldr              r0,=0x00010000 ;select P1.19--P
                                                            1.16
   99 0000001C E5820000        str              r0, [r2]
  100 00000020         ;delay for about a half second
  101 00000020 E59F4024        ldr              r4,=4000000
  102 00000024         ;ldr r4,=1
  103 00000024 E2544001 
                       dloop   subs             r4,r4,#1
  104 00000028 1AFFFFFD        bne              dloop
  105 0000002C         
  106 0000002C E5810000        str              r0, [r1]
  107 00000030         ;delay for about a half second
  108 00000030 E59F4014        ldr              r4,=4000000



ARM Macro Assembler    Page 4 


  109 00000034 E2544001 
                       dloop2  subs             r4,r4,#1
  110 00000038 1AFFFFFD        bne              dloop2
  111 0000003C EAFFFFF5        b                floop
  112 00000040         
  113 00000040         ;end blinky1
  114 00000040         
  115 00000040         
  116 00000040         ;thread 1
  117 00000040 E0028018 
              E0028014 
              E002801C 
              003D0900         AREA             blinky1, CODE, READONLY
  118 00000000         
  119 00000000         startBlinky1
  120 00000000         
  121 00000000 E59F1038        ldr              r1,=IO0DIR
  122 00000004 E3A02826        ldr              r2,=0X00260000 ;select P1.19--P
                                                            1.16
  123 00000008 E5812000        str              r2,[r1]     ;make them outputs
  124 0000000C         
  125 0000000C         
  126 0000000C E59F1030        ldr              r1,=IO0SET
  127 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
  128 00000014 E59F202C        ldr              r2,=IO0CLR
  129 00000018         
  130 00000018         
  131 00000018         ; r1 points to the SET register
  132 00000018         ; r2 points to the CLEAR register
  133 00000018         floopb2
  134 00000018 E3A00602        ldr              r0,=0X00200000 ;select P1.19--P
                                                            1.16
  135 0000001C E5820000        str              r0, [r2]
  136 00000020         ;delay for about a half second
  137 00000020 E59F4024        ldr              r4,=4000000
  138 00000024 E2544001 
                       dloopb2 subs             r4,r4,#1
  139 00000028 1AFFFFFD        bne              dloopb2
  140 0000002C         
  141 0000002C E5810000        str              r0, [r1]
  142 00000030         ;delay for about a half second
  143 00000030 E59F4014        ldr              r4,=4000000
  144 00000034 E2544001 
                       dloopb22
                               subs             r4,r4,#1
  145 00000038 1AFFFFFD        bne              dloopb22
  146 0000003C EAFFFFF5        b                floopb2
  147 00000040         
  148 00000040         ;end blinky 2
  149 00000040         
  150 00000040         ;interrupt stuff
  151 00000040 E0028008 
              E0028004 
              E002800C 
              003D0900         AREA             InterruptStuff, CODE, READONLY
  152 00000000         irqhan
  153 00000000         ;Setup the return address as we want to re-excute the in
                       terrupted instruction



ARM Macro Assembler    Page 5 


  154 00000000 E24EE004        sub              lr,lr,#4
  155 00000004         ;Store the context of the thread we interrupted to the i
                       nterrupt stack
  156 00000004 E92D5FFF        stmfd            sp!,{r0-r12,lr}
  157 00000008         ;this is the body of the interrupt handler
  158 00000008         ;switching threads
  159 00000008 E59F00A4        ldr              r0, =CURRENTTHREAD
  160 0000000C E5901000        ldr              r1, [r0]
  161 00000010 E3710001        cmp              r1, #-1
  162 00000014 0A000003        beq              initialSwitch
  163 00000018 E3510000        cmp              r1, #0
  164 0000001C 0A00000B        beq              switchToThread1
  165 00000020 E3510001        cmp              r1, #1
  166 00000024 0A000012        beq              switchToThread0
  167 00000028         
  168 00000028         initialSwitch
  169 00000028         ;In here we setup the contexts and decide on which threa
                       d to run
  170 00000028         ;Initialise thread contexts 
  171 00000028         ;mov r0, sp ; save the current stack pointer
  172 00000028         ;Set thread 1 as the running thread
  173 00000028 E59F0084        ldr              r0, =CURRENTTHREAD
  174 0000002C E3A01001        ldr              r1, =1
  175 00000030 E5801000        str              r1, [r0]
  176 00000034         ;load the initial values for thread 0
  177 00000034 E59FD07C        ldr              sp, =THREAD0STACK
  178 00000038 E59FE080        ldr              lr, =startBlinky0
  179 0000003C E88D5FFF        stmia            sp, {r0-r12, lr}
  180 00000040         ;load the initial values for thread 1
  181 00000040 E59FD074        ldr              sp, =THREAD1STACK
  182 00000044 E59FE07C        ldr              lr, =startBlinky1
  183 00000048 E8AD5FFF        stmia            sp!, {r0-r12, lr}
  184 0000004C         ;The stack pointer is now updated and ready
  185 0000004C         ;to restore thread 1
  186 0000004C EA000011        b                restoreContext
  187 00000050         
  188 00000050         switchToThread1
  189 00000050         ;Update current thread to thread 1
  190 00000050 E59F005C        ldr              r0, =CURRENTTHREAD
  191 00000054 E3A01001        ldr              r1, =1
  192 00000058 E5801000        str              r1, [r0]
  193 0000005C         ;Restore the context of the last thread from interrupt s
                       tack
  194 0000005C E8BD5FFF        ldmfd            sp!, {r0-r12, lr}
  195 00000060         ;Save the context of the interrrupted thread to its stac
                       k
  196 00000060 E59FD050        ldr              sp, =THREAD0STACK
  197 00000064 E88D5FFF        stmia            sp, {r0-r12, lr}
  198 00000068         ;Setup the stack pointer for restore of thread 1
  199 00000068 E59FD04C        ldr              sp, =THREAD1STACK
  200 0000006C E28DD038        add              sp, sp, #14*4
  201 00000070 EA000008        b                restoreContext
  202 00000074         
  203 00000074         switchToThread0
  204 00000074         ;Update current thread to thread 0
  205 00000074 E59F0038        ldr              r0, =CURRENTTHREAD
  206 00000078 E3A01000        ldr              r1, =0
  207 0000007C E5801000        str              r1, [r0]
  208 00000080         ;Restore the context of the last thread from interrupt s



ARM Macro Assembler    Page 6 


                       tack
  209 00000080 E8BD5FFF        ldmfd            sp!, {r0-r12, lr}
  210 00000084         ;Save the context of the interrrupted thread to its stac
                       k
  211 00000084 E59FD030        ldr              sp, =THREAD1STACK
  212 00000088 E88D5FFF        stmia            sp, {r0-r12, lr}
  213 0000008C         ;Setup the stack pointer for restore of thread 0
  214 0000008C E59FD024        ldr              sp, =THREAD0STACK
  215 00000090 E28DD038        add              sp, sp, #14*4
  216 00000094 EAFFFFFF        b                restoreContext
  217 00000098         
  218 00000098         restoreContext
  219 00000098         
  220 00000098         ;this is where we stop the timer from making the interru
                       pt request to the VIC
  221 00000098         ;i.e. we 'acknowledge' the interrupt
  222 00000098 E59F0044        ldr              r0,=T0
  223 0000009C E3A01001        mov              r1,#TimerResetTimer0Interrupt
  224 000000A0 E5801000        str              r1,[r0,#IR] ; remove MR0 interr
                                                            upt request from ti
                                                            mer
  225 000000A4         
  226 000000A4         ;here we stop the VIC from making the interrupt request 
                       to the CPU:
  227 000000A4 E59F003C        ldr              r0,=VIC
  228 000000A8 E3A01000        mov              r1,#0
  229 000000AC E5801030        str              r1,[r0,#VectAddr] ; reset VIC
  230 000000B0         
  231 000000B0         ;mrs r0, spsr
  232 000000B0         ;msr cpsr_cxsf, r0
  233 000000B0         
  234 000000B0         ;Resume the selected thread and return to the user mode
  235 000000B0 E95D9FFF        ldmdb            sp,{r0-r12,pc}^
  236 000000B4         
  237 000000B4         
  238 000000B4 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0004000 
              FFFFF000         AREA             processStorage, READWRITE
  239 00000000         
  240 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    THREAD0STACK
                               SPACE            56
  241 00000038 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    THREAD1STACK
                               SPACE            56
  242 00000070 FFFFFFFF 
                       CURRENTTHREAD
                               DCD              -1
  243 00000074                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 39 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
initLoop 00000050

Symbol: initLoop
   Definitions
      At line 81 in file App.s
   Uses
      At line 81 in file App.s
Comment: initLoop used once
start 00000000

Symbol: start
   Definitions
      At line 43 in file App.s
   Uses
      At line 42 in file App.s
Comment: start used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

blinky0 00000000

Symbol: blinky0
   Definitions
      At line 84 in file App.s
   Uses
      None
Comment: blinky0 unused
dloop 00000024

Symbol: dloop
   Definitions
      At line 103 in file App.s
   Uses
      At line 104 in file App.s
Comment: dloop used once
dloop2 00000034

Symbol: dloop2
   Definitions
      At line 109 in file App.s
   Uses
      At line 110 in file App.s
Comment: dloop2 used once
floop 00000018

Symbol: floop
   Definitions
      At line 97 in file App.s
   Uses
      At line 111 in file App.s
Comment: floop used once
startBlinky0 00000000

Symbol: startBlinky0
   Definitions
      At line 86 in file App.s
   Uses
      At line 178 in file App.s
Comment: startBlinky0 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

blinky1 00000000

Symbol: blinky1
   Definitions
      At line 117 in file App.s
   Uses
      None
Comment: blinky1 unused
dloopb2 00000024

Symbol: dloopb2
   Definitions
      At line 138 in file App.s
   Uses
      At line 139 in file App.s
Comment: dloopb2 used once
dloopb22 00000034

Symbol: dloopb22
   Definitions
      At line 144 in file App.s
   Uses
      At line 145 in file App.s
Comment: dloopb22 used once
floopb2 00000018

Symbol: floopb2
   Definitions
      At line 133 in file App.s
   Uses
      At line 146 in file App.s
Comment: floopb2 used once
startBlinky1 00000000

Symbol: startBlinky1
   Definitions
      At line 119 in file App.s
   Uses
      At line 182 in file App.s
Comment: startBlinky1 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 151 in file App.s
   Uses
      None
Comment: InterruptStuff unused
initialSwitch 00000028

Symbol: initialSwitch
   Definitions
      At line 168 in file App.s
   Uses
      At line 162 in file App.s
Comment: initialSwitch used once
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 152 in file App.s
   Uses
      At line 49 in file App.s
Comment: irqhan used once
restoreContext 00000098

Symbol: restoreContext
   Definitions
      At line 218 in file App.s
   Uses
      At line 186 in file App.s
      At line 201 in file App.s
      At line 216 in file App.s

switchToThread0 00000074

Symbol: switchToThread0
   Definitions
      At line 203 in file App.s
   Uses
      At line 166 in file App.s
Comment: switchToThread0 used once
switchToThread1 00000050

Symbol: switchToThread1
   Definitions
      At line 188 in file App.s
   Uses
      At line 164 in file App.s
Comment: switchToThread1 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CURRENTTHREAD 00000070

Symbol: CURRENTTHREAD
   Definitions
      At line 242 in file App.s
   Uses
      At line 159 in file App.s
      At line 173 in file App.s
      At line 190 in file App.s
      At line 205 in file App.s

THREAD0STACK 00000000

Symbol: THREAD0STACK
   Definitions
      At line 240 in file App.s
   Uses
      At line 177 in file App.s
      At line 196 in file App.s
      At line 214 in file App.s

THREAD1STACK 00000038

Symbol: THREAD1STACK
   Definitions
      At line 241 in file App.s
   Uses
      At line 181 in file App.s
      At line 199 in file App.s
      At line 211 in file App.s

processStorage 00000000

Symbol: processStorage
   Definitions
      At line 238 in file App.s
   Uses
      None
Comment: processStorage unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 36 in file App.s
   Uses
      At line 128 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 34 in file App.s
   Uses
      At line 121 in file App.s
Comment: IO0DIR used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 37 in file App.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 35 in file App.s
   Uses
      At line 126 in file App.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 32 in file App.s
   Uses
      At line 94 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 30 in file App.s
   Uses
      At line 87 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 31 in file App.s
   Uses
      At line 92 in file App.s
Comment: IO1SET used once
IR 00000000

Symbol: IR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 8 in file App.s
   Uses
      At line 68 in file App.s
      At line 224 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 28 in file App.s
   Uses
      At line 52 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 21 in file App.s
   Uses
      At line 56 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 10 in file App.s
   Uses
      At line 74 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 11 in file App.s
   Uses
      At line 71 in file App.s
Comment: MR0 used once
T0 E0004000

Symbol: T0
   Definitions
      At line 5 in file App.s
   Uses
      At line 62 in file App.s
      At line 222 in file App.s

T1 E0008000

Symbol: T1
   Definitions
      At line 6 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 9 in file App.s
   Uses
      At line 65 in file App.s
      At line 77 in file App.s

Timer0ChannelNumber 00000004

Symbol: Timer0ChannelNumber
   Definitions
      At line 26 in file App.s
   Uses
      At line 27 in file App.s
      At line 52 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 27 in file App.s
   Uses
      At line 55 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 13 in file App.s
   Uses
      At line 64 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 14 in file App.s
   Uses
      At line 76 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 15 in file App.s
   Uses
      At line 73 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF

Symbol: TimerResetAllInterrupts
   Definitions
      At line 17 in file App.s
   Uses
      At line 67 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 16 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 223 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions
      At line 20 in file App.s
   Uses
      At line 47 in file App.s
      At line 227 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 22 in file App.s
   Uses
      At line 59 in file App.s
      At line 229 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 23 in file App.s
   Uses
      At line 50 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 24 in file App.s
   Uses
      At line 53 in file App.s
Comment: VectCtrl0 used once
26 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 40 in file App.s
   Uses
      None
Comment: main unused
1 symbol
391 symbols in table
