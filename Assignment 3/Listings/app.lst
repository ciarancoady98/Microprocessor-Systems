


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ; INTIALISATION
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;
   14 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;I/O Pin Register A
                                                            ddress
   15 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ;Set Direction Of P
                                                            ins
   16 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ;Set Bits In Regist
                                                            er (Turn off LEDS)
   17 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ;Clear Bits In Regi
                                                            ster (Turn on LEDS)
                                                            
   18 00000000         
   19 00000000 E59F12C4        ldr              r1,=IO1DIR
   20 00000004 E3A0280F        ldr              r2,=0x000f0000 ;Select P1.19--P
                                                            1.16
   21 00000008 E5812000        str              r2,[r1]     ;Make them outputs
   22 0000000C E59F12BC        ldr              r1,=IO1SET
   23 00000010 E5812000        str              r2,[r1]     ;Turn the LEDs off 
                                                            (Set bits)
   24 00000014 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
   25 00000018 E3A0B000        mov              r11, #0     ;R11 - sum
   26 0000001C E3A0A000        mov              r10, #0     ;R10 - operator
   27 00000020 E3A09000        mov              r9, #0      ;R9 - last number
   28 00000024 E3A08000        mov              r8, #0      ;R8 - last button
   29 00000028         
   30 00000028         ;MAIN PROGRAM LOOP
   31 00000028         ;
   32 00000028         ;
   33 00000028         ;
   34 00000028         
   35 00000028 E3A06000        mov              r6, #0
   36 0000002C         mainloop
   37 0000002C         ;bl flash
   38 0000002C E3A00000        ldr              r0, =0
   39 00000030 EA000005        b                pressCheck  ;Poll to see if but
                                                            ton has been presse
                                                            d
   40 00000034         endPressCheck
   41 00000034 E3500000        cmp              r0, #0      ;if(press() != notP
                                                            ressed)
   42 00000038 0A000002        beq              endSwitch



ARM Macro Assembler    Page 2 


   43 0000003C E3500602        cmp              r0, #0x00200000 ;Comparison val
                                                            ue for Decrease Cur
                                                            rent Number
   44 00000040 DA000005        ble              numberChange
   45 00000044 EA000006        b                operatorChange
   46 00000048         endSwitch
   47 00000048         
   48 00000048 EAFFFFF7        b                mainloop
   49 0000004C         
   50 0000004C         ;BRANCH AND LINK TO SUBROUTINES
   51 0000004C         ;Recuired as we need to branch and link
   52 0000004C         ;Can get rid of this by calculating offset with the pc
   53 0000004C         ;
   54 0000004C         pressCheck
   55 0000004C EB000029        bl               press
   56 00000050 E3570001        cmp              r7, #1
   57 00000054 0AFFFFFB        beq              endSwitch
   58 00000058 EAFFFFF5        b                endPressCheck
   59 0000005C         
   60 0000005C         numberChange
   61 0000005C EB000003        bl               numberChangeSub
   62 00000060 EAFFFFF8        b                endSwitch
   63 00000064         
   64 00000064         operatorChange
   65 00000064 EB00000B        bl               operatorChangeSub
   66 00000068 EAFFFFF6        b                endSwitch
   67 0000006C         
   68 0000006C EAFFFFFE 
                       stop    B                stop
   69 00000070         
   70 00000070         ;numberChange Subroutine
   71 00000070         ;
   72 00000070         ;R0 - button pressed
   73 00000070         ;R12 - current number
   74 00000070         ;
   75 00000070         ;Increses or decreases the current sum based
   76 00000070         ;on the button pressed
   77 00000070         numberChangeSub
   78 00000070 E92D4000        stmfd            sp!, {lr}   ;Save link register
                                                             to stack
   79 00000074 E3A08000        mov              r8, #0
   80 00000078 E3500601        cmp              r0, #0x00100000 ;if(buttonPress
                                                            ed != '+')
   81 0000007C 0A000001        beq              adding
   82 00000080         ;subtracting
   83 00000080 E24CC001        sub              r12, r12, #1 ;currentNumber--
   84 00000084 EA000000        b                endNumberChange
   85 00000088         adding                               ;else if(buttonPres
                                                            sed == '-')
   86 00000088 E28CC001        add              r12, r12, #1 ;currentNumber++
   87 0000008C         endNumberChange
   88 0000008C E1A0100C        mov              r1, r12
   89 00000090 EB00006A        bl               updateDisplay
   90 00000094 E8BD8000        ldmfd            sp!, { pc}
   91 00000098         
   92 00000098         
   93 00000098         ;operatorChange Subroutine
   94 00000098         ;
   95 00000098         ;R0 - button pressed



ARM Macro Assembler    Page 3 


   96 00000098         ;R12 - current number
   97 00000098         ;
   98 00000098         ;Adds a plus or minus to our stack based
   99 00000098         ;on the button pressed
  100 00000098         operatorChangeSub
  101 00000098 E92D4000        stmfd            sp!, {lr}
  102 0000009C         ;poll for long press
  103 0000009C         ;bl longPress
  104 0000009C         ;cmp r7, #1      ;if(!long press)
  105 0000009C         ;beq endOpChange2PointO
  106 0000009C E3A08001        mov              r8, #1      ;last button = oper
                                                            ator
  107 000000A0 E35A0000        cmp              r10, #0     ;if(firstOp)
  108 000000A4 0A000000        beq              firstNumber
  109 000000A8 EA000001        b                endFirstNumber
  110 000000AC         firstNumber
  111 000000AC E1A0B00C        mov              r11, r12    ;sum = currentSum
  112 000000B0 EA000004        b                updateCurrentOp
  113 000000B4         endFirstNumber
  114 000000B4 E35A002B        cmp              r10, #'+'
  115 000000B8 1A000001        bne              minus
  116 000000BC E08BB00C        add              r11, r11, r12 ;add
  117 000000C0 EA000000        b                updateCurrentOp
  118 000000C4         minus
  119 000000C4 E04BB00C        sub              r11, r11, r12 ;sub
  120 000000C8         
  121 000000C8         
  122 000000C8         
  123 000000C8         updateCurrentOp
  124 000000C8 E3500501        cmp              r0, #0x00400000 ;if(operator !=
                                                             '+')
  125 000000CC 0A000002        beq              addition
  126 000000D0         ;subtraction
  127 000000D0 E3A0A02D        ldr              r10, ='-'   ;operator = -
  128 000000D4 E1A0900C        mov              r9, r12
  129 000000D8 EA000002        b                endOpChange
  130 000000DC         addition
  131 000000DC E3A0A02B        ldr              r10, ='+'   ;else if(operator =
                                                            = '+')
  132 000000E0 E1E0900C        mvn              r9, r12     ;last number = -cur
                                                            rentNumber
  133 000000E4 E2899001        add              r9, r9, #1
  134 000000E8         ;last number = currentNumber
  135 000000E8         endOpChange
  136 000000E8 E3A0C000        mov              r12, #0     ;currentNumber = 0
  137 000000EC         endOpChange2PointO
  138 000000EC E1A0100B        mov              r1, r11
  139 000000F0 EB000052        bl               updateDisplay
  140 000000F4 E8BD8000        ldmfd            sp!, { pc}
  141 000000F8         
  142 000000F8         ;press subroutine
  143 000000F8         ;polls the I/O pin register to see if a 
  144 000000F8         ;button has been pressed
  145 000000F8         press
  146 000000F8 E92D4000        stmfd            sp!, {lr}
  147 000000FC E59F01D0        ldr              r0, =IO1PIN
  148 00000100 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  149 00000104 E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits



ARM Macro Assembler    Page 4 


  150 00000108 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  151 0000010C E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  152 00000110 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  153 00000114 E3500501        cmp              r0, #0x00400000
  154 00000118 AA000000        bge              branchToLongPress
  155 0000011C         endLongPressBranch
  156 0000011C E8BD8000        ldmfd            sp!, {pc}
  157 00000120         
  158 00000120         branchToLongPress
  159 00000120 EB000000        bl               longPress
  160 00000124 EAFFFFFC        b                endLongPressBranch
  161 00000128         
  162 00000128         ;long press subroutine
  163 00000128         ;polls the I/O pin register to see if a 
  164 00000128         ;button has been pressed
  165 00000128         longPress
  166 00000128 E92D4041        stmfd            sp!, {r0,r6,lr}
  167 0000012C E3A05000        mov              r5,#0
  168 00000130 E59F61A0        ldr              r6, =50000000
  169 00000134         dloop3
  170 00000134 E1550006        cmp              r5, r6
  171 00000138 0A00000C        beq              enddloop3
  172 0000013C E3500501        cmp              r0, #0x00400000
  173 00000140 BA00000A        blt              enddloop3   ;while(delay > 0 &&
                                                             button=pressed){
  174 00000144         ;bl flash
  175 00000144 E59F0188        ldr              r0, =IO1PIN
  176 00000148 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  177 0000014C E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  178 00000150 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  179 00000154 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  180 00000158 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  181 0000015C         updateButton
  182 0000015C E3500000        cmp              r0, #0
  183 00000160 0A000000        beq              endUpdateButton
  184 00000164 E1A07000        mov              r7, r0
  185 00000168         endUpdateButton
  186 00000168         
  187 00000168 E2855001        add              r5,r5,#1    ;   delay--
  188 0000016C EAFFFFF0        b                dloop3      ;
  189 00000170         enddloop3
  190 00000170         
  191 00000170 E59F6164        ldr              r6, =500000
  192 00000174 E1550006        cmp              r5, r6
  193 00000178 BA000004        blt              endLongPress
  194 0000017C E3570502        cmp              r7, #0x00800000
  195 00000180 0A000006        beq              clearAll
  196 00000184 EB00000E        bl               clearLastSub
  197 00000188         endClear
  198 00000188 E3A07001        mov              r7, #1



ARM Macro Assembler    Page 5 


  199 0000018C EA000000        b                theActualEnd
  200 00000190         endLongPress
  201 00000190 E3A07000        mov              r7, #0
  202 00000194         theActualEnd
  203 00000194 E1A0100B        mov              r1, r11
  204 00000198 EB000028        bl               updateDisplay
  205 0000019C E8BD8041        ldmfd            sp!, {r0,r6,pc}
  206 000001A0         
  207 000001A0         clearAll
  208 000001A0 EB000000        bl               clearAllSub
  209 000001A4 EAFFFFF7        b                endClear
  210 000001A8         
  211 000001A8         clearAllSub
  212 000001A8 E92D4000        stmfd            sp!, {lr}
  213 000001AC E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
  214 000001B0 E3A0B000        mov              r11, #0     ;R11 - sum
  215 000001B4 E3A0A000        mov              r10, #0     ;R10 - operator
  216 000001B8 E3A09000        mov              r9, #0      ;R9 - last number
  217 000001BC E3A08000        mov              r8, #0      ;R8 - last button
  218 000001C0 E8BD8000        ldmfd            sp!, {pc}
  219 000001C4         
  220 000001C4         clearLastSub
  221 000001C4 E92D4000        stmfd            sp!, {lr}
  222 000001C8 E3580000        cmp              r8, #0
  223 000001CC 0A000000        beq              numberLast
  224 000001D0 E08BB009        add              r11, r11, r9
  225 000001D4         numberLast
  226 000001D4 E3A0A000        mov              r10, #0
  227 000001D8 E3A09000        mov              r9, #0
  228 000001DC E3A08000        mov              r8, #0
  229 000001E0 E3A0C000        mov              r12, #0
  230 000001E4 E8BD8000        ldmfd            sp!, {pc}
  231 000001E8         
  232 000001E8         ;clearDisplay subroutine
  233 000001E8         ;Turns off all LEDS
  234 000001E8         flash
  235 000001E8 E92D40FF        stmfd            sp!, {r0-r7, lr}
  236 000001EC E59F10EC        ldr              r1,=IO1CLR
  237 000001F0 E3A0080F        mov              r0, #0x000f0000
  238 000001F4 E5810000        str              r0,[r1]     ;Turn the LEDs off
  239 000001F8 E59F50DC        ldr              r5, =500000
  240 000001FC         dloop12
  241 000001FC E3550000        cmp              r5, #0
  242 00000200 DA000001        ble              enddloop12  ;while(delay > 0){
  243 00000204 E2555001        subs             r5,r5,#1    ;   delay--
  244 00000208 EAFFFFFB        b                dloop12     ;}
  245 0000020C         enddloop12
  246 0000020C E59F10BC        ldr              r1,=IO1SET
  247 00000210 E5810000        str              r0,[r1]
  248 00000214         
  249 00000214 E59F10C4        ldr              r1,=IO1CLR
  250 00000218 E3A0080F        mov              r0, #0x000f0000
  251 0000021C E5810000        str              r0,[r1]     ;Turn the LEDs off
  252 00000220 E59F50B4        ldr              r5, =500000
  253 00000224         dloop17
  254 00000224 E3550000        cmp              r5, #0
  255 00000228 DA000001        ble              enddloop17  ;while(delay > 0){



ARM Macro Assembler    Page 6 


  256 0000022C E2555001        subs             r5,r5,#1    ;   delay--
  257 00000230 EAFFFFFB        b                dloop17     ;}
  258 00000234         enddloop17
  259 00000234 E59F1094        ldr              r1,=IO1SET
  260 00000238 E5810000        str              r0,[r1]
  261 0000023C         
  262 0000023C E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  263 00000240         
  264 00000240         ;updateDisplay subroutine
  265 00000240         ;Updates the value displayed on the LEDS
  266 00000240         updateDisplay
  267 00000240 E92D40FF        stmfd            sp!, {r0-r7, lr}
  268 00000244 E1A00801        mov              r0, r1, lsl #16 ;Shift currentN
                                                            umber to the correc
                                                            t position to mask
  269 00000248 EB00000F        bl               reverseNumber
  270 0000024C E59F107C        ldr              r1,=IO1SET
  271 00000250 E3A0280F        mov              r2, #0x000f0000
  272 00000254 E5812000        str              r2,[r1]     ;Turn the LEDs off
  273 00000258         
  274 00000258 E59F5084        ldr              r5,=50000   ;Value for delay
  275 0000025C         dloop
  276 0000025C E3550000        cmp              r5, #0
  277 00000260 DA000001        ble              enddloop    ;while(delay > 0){
  278 00000264 E2555001        subs             r5,r5,#1    ;   delay--
  279 00000268 EAFFFFFB        b                dloop       ;}
  280 0000026C         enddloop
  281 0000026C E59F106C        ldr              r1,=IO1CLR
  282 00000270 E5810000        str              r0,[r1]     ;Turn on correct LE
                                                            D's
  283 00000274         
  284 00000274 E59F506C        ldr              r5,=5000000 ;Value for delay
  285 00000278         dloop1
  286 00000278 E3550000        cmp              r5, #0
  287 0000027C DA000001        ble              enddloop1   ;while(delay > 0){
  288 00000280 E2555001        subs             r5,r5,#1    ;   delay--
  289 00000284 EAFFFFFB        b                dloop1      ;}
  290 00000288         enddloop1
  291 00000288 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  292 0000028C         
  293 0000028C         ;Reverse Number Subroutine
  294 0000028C         ;Reverses a 4 bit binary number placing it
  295 0000028C         ;in the correct position to turn on LEDS
  296 0000028C         ;
  297 0000028C         ;R0 number being converted
  298 0000028C         ;
  299 0000028C         reverseNumber
  300 0000028C E92D41F8        stmfd            SP!, {lr, r3-r8} ; store regist
                                                            ers to stack
  301 00000290 E3A03000        ldr              r3, =0      ; count = 0
  302 00000294 E3A04000        ldr              r4, =0      ; reversed number 
  303 00000298         reverse
  304 00000298 E3530024        cmp              r3, #36     ; while(count < num
                                                            ber of digits to re
                                                            verse){
  305 0000029C AA000008        bge              endreverse
  306 000002A0 E2005001        and              r5, r0, #1  ; mask out least si
                                                            gnificant bit
  307 000002A4 E1A000A0        mov              r0, r0, lsr #1 ; shift original



ARM Macro Assembler    Page 7 


                                                             number right 1 bit
                                                            
  308 000002A8 E1A04084        mov              r4, r4, lsl #1 ; shift reversed
                                                             number left 1 bit
  309 000002AC E3550001        cmp              r5, #1      ; if(masked bit == 
                                                            1){
  310 000002B0 0A000000        beq              push1
  311 000002B4 EA000000        b                endpush
  312 000002B8         push1
  313 000002B8 E3844001        orr              r4, r4, #1  ; mask in a 1
  314 000002BC         endpush
  315 000002BC E2833001        add              r3, r3, #1  ; count++
  316 000002C0 EAFFFFF4        b                reverse
  317 000002C4         endreverse
  318 000002C4 E1A00004        mov              r0, r4
  319 000002C8 E8BD81F8        ldmfd            SP!, {pc, r3-r8}
  320 000002CC         
  321 000002CC                 END
              E0028018 
              E0028014 
              E0028010 
              02FAF080 
              0007A120 
              E002801C 
              0000C350 
              004C4B40 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
adding 00000088

Symbol: adding
   Definitions
      At line 85 in file App.s
   Uses
      At line 81 in file App.s
Comment: adding used once
addition 000000DC

Symbol: addition
   Definitions
      At line 130 in file App.s
   Uses
      At line 125 in file App.s
Comment: addition used once
branchToLongPress 00000120

Symbol: branchToLongPress
   Definitions
      At line 158 in file App.s
   Uses
      At line 154 in file App.s
Comment: branchToLongPress used once
clearAll 000001A0

Symbol: clearAll
   Definitions
      At line 207 in file App.s
   Uses
      At line 195 in file App.s
Comment: clearAll used once
clearAllSub 000001A8

Symbol: clearAllSub
   Definitions
      At line 211 in file App.s
   Uses
      At line 208 in file App.s
Comment: clearAllSub used once
clearLastSub 000001C4

Symbol: clearLastSub
   Definitions
      At line 220 in file App.s
   Uses
      At line 196 in file App.s
Comment: clearLastSub used once
dloop 0000025C

Symbol: dloop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 275 in file App.s
   Uses
      At line 279 in file App.s
Comment: dloop used once
dloop1 00000278

Symbol: dloop1
   Definitions
      At line 285 in file App.s
   Uses
      At line 289 in file App.s
Comment: dloop1 used once
dloop12 000001FC

Symbol: dloop12
   Definitions
      At line 240 in file App.s
   Uses
      At line 244 in file App.s
Comment: dloop12 used once
dloop17 00000224

Symbol: dloop17
   Definitions
      At line 253 in file App.s
   Uses
      At line 257 in file App.s
Comment: dloop17 used once
dloop3 00000134

Symbol: dloop3
   Definitions
      At line 169 in file App.s
   Uses
      At line 188 in file App.s
Comment: dloop3 used once
endClear 00000188

Symbol: endClear
   Definitions
      At line 197 in file App.s
   Uses
      At line 209 in file App.s
Comment: endClear used once
endFirstNumber 000000B4

Symbol: endFirstNumber
   Definitions
      At line 113 in file App.s
   Uses
      At line 109 in file App.s
Comment: endFirstNumber used once
endLongPress 00000190

Symbol: endLongPress
   Definitions
      At line 200 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 193 in file App.s
Comment: endLongPress used once
endLongPressBranch 0000011C

Symbol: endLongPressBranch
   Definitions
      At line 155 in file App.s
   Uses
      At line 160 in file App.s
Comment: endLongPressBranch used once
endNumberChange 0000008C

Symbol: endNumberChange
   Definitions
      At line 87 in file App.s
   Uses
      At line 84 in file App.s
Comment: endNumberChange used once
endOpChange 000000E8

Symbol: endOpChange
   Definitions
      At line 135 in file App.s
   Uses
      At line 129 in file App.s
Comment: endOpChange used once
endOpChange2PointO 000000EC

Symbol: endOpChange2PointO
   Definitions
      At line 137 in file App.s
   Uses
      None
Comment: endOpChange2PointO unused
endPressCheck 00000034

Symbol: endPressCheck
   Definitions
      At line 40 in file App.s
   Uses
      At line 58 in file App.s
Comment: endPressCheck used once
endSwitch 00000048

Symbol: endSwitch
   Definitions
      At line 46 in file App.s
   Uses
      At line 42 in file App.s
      At line 57 in file App.s
      At line 62 in file App.s
      At line 66 in file App.s

endUpdateButton 00000168

Symbol: endUpdateButton
   Definitions
      At line 185 in file App.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 183 in file App.s
Comment: endUpdateButton used once
enddloop 0000026C

Symbol: enddloop
   Definitions
      At line 280 in file App.s
   Uses
      At line 277 in file App.s
Comment: enddloop used once
enddloop1 00000288

Symbol: enddloop1
   Definitions
      At line 290 in file App.s
   Uses
      At line 287 in file App.s
Comment: enddloop1 used once
enddloop12 0000020C

Symbol: enddloop12
   Definitions
      At line 245 in file App.s
   Uses
      At line 242 in file App.s
Comment: enddloop12 used once
enddloop17 00000234

Symbol: enddloop17
   Definitions
      At line 258 in file App.s
   Uses
      At line 255 in file App.s
Comment: enddloop17 used once
enddloop3 00000170

Symbol: enddloop3
   Definitions
      At line 189 in file App.s
   Uses
      At line 171 in file App.s
      At line 173 in file App.s

endpush 000002BC

Symbol: endpush
   Definitions
      At line 314 in file App.s
   Uses
      At line 311 in file App.s
Comment: endpush used once
endreverse 000002C4

Symbol: endreverse
   Definitions
      At line 317 in file App.s
   Uses
      At line 305 in file App.s
Comment: endreverse used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

firstNumber 000000AC

Symbol: firstNumber
   Definitions
      At line 110 in file App.s
   Uses
      At line 108 in file App.s
Comment: firstNumber used once
flash 000001E8

Symbol: flash
   Definitions
      At line 234 in file App.s
   Uses
      None
Comment: flash unused
longPress 00000128

Symbol: longPress
   Definitions
      At line 165 in file App.s
   Uses
      At line 159 in file App.s
Comment: longPress used once
mainloop 0000002C

Symbol: mainloop
   Definitions
      At line 36 in file App.s
   Uses
      At line 48 in file App.s
Comment: mainloop used once
minus 000000C4

Symbol: minus
   Definitions
      At line 118 in file App.s
   Uses
      At line 115 in file App.s
Comment: minus used once
numberChange 0000005C

Symbol: numberChange
   Definitions
      At line 60 in file App.s
   Uses
      At line 44 in file App.s
Comment: numberChange used once
numberChangeSub 00000070

Symbol: numberChangeSub
   Definitions
      At line 77 in file App.s
   Uses
      At line 61 in file App.s
Comment: numberChangeSub used once
numberLast 000001D4

Symbol: numberLast



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 225 in file App.s
   Uses
      At line 223 in file App.s
Comment: numberLast used once
operatorChange 00000064

Symbol: operatorChange
   Definitions
      At line 64 in file App.s
   Uses
      At line 45 in file App.s
Comment: operatorChange used once
operatorChangeSub 00000098

Symbol: operatorChangeSub
   Definitions
      At line 100 in file App.s
   Uses
      At line 65 in file App.s
Comment: operatorChangeSub used once
press 000000F8

Symbol: press
   Definitions
      At line 145 in file App.s
   Uses
      At line 55 in file App.s
Comment: press used once
pressCheck 0000004C

Symbol: pressCheck
   Definitions
      At line 54 in file App.s
   Uses
      At line 39 in file App.s
Comment: pressCheck used once
push1 000002B8

Symbol: push1
   Definitions
      At line 312 in file App.s
   Uses
      At line 310 in file App.s
Comment: push1 used once
reverse 00000298

Symbol: reverse
   Definitions
      At line 303 in file App.s
   Uses
      At line 316 in file App.s
Comment: reverse used once
reverseNumber 0000028C

Symbol: reverseNumber
   Definitions
      At line 299 in file App.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 269 in file App.s
Comment: reverseNumber used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 0000006C

Symbol: stop
   Definitions
      At line 68 in file App.s
   Uses
      At line 68 in file App.s
Comment: stop used once
theActualEnd 00000194

Symbol: theActualEnd
   Definitions
      At line 202 in file App.s
   Uses
      At line 199 in file App.s
Comment: theActualEnd used once
updateButton 0000015C

Symbol: updateButton
   Definitions
      At line 181 in file App.s
   Uses
      None
Comment: updateButton unused
updateCurrentOp 000000C8

Symbol: updateCurrentOp
   Definitions
      At line 123 in file App.s
   Uses
      At line 112 in file App.s
      At line 117 in file App.s

updateDisplay 00000240

Symbol: updateDisplay
   Definitions
      At line 266 in file App.s
   Uses
      At line 89 in file App.s
      At line 139 in file App.s
      At line 204 in file App.s

50 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 17 in file App.s
   Uses
      At line 236 in file App.s
      At line 249 in file App.s
      At line 281 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 15 in file App.s
   Uses
      At line 19 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 14 in file App.s
   Uses
      At line 147 in file App.s
      At line 175 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 16 in file App.s
   Uses
      At line 22 in file App.s
      At line 246 in file App.s
      At line 259 in file App.s
      At line 270 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
390 symbols in table
