


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ; INTIALISATION
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;
   14 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;I/O Pin Register A
                                                            ddress
   15 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ;Set Direction Of P
                                                            ins
   16 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ;Set Bits In Regist
                                                            er (Turn off LEDS)
   17 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ;Clear Bits In Regi
                                                            ster (Turn on LEDS)
                                                            
   18 00000000         
   19 00000000 E59F111C        ldr              r1,=IO1DIR
   20 00000004 E3A0280F        ldr              r2,=0x000f0000 ;Select P1.19--P
                                                            1.16
   21 00000008 E5812000        str              r2,[r1]     ;Make them outputs
   22 0000000C E59F1114        ldr              r1,=IO1SET
   23 00000010 E5812000        str              r2,[r1]     ;Turn the LEDs off 
                                                            (Set bits)
   24 00000014 E59FB110        ldr              r11, =SUM   ;Address in memory 
                                                            where we store our 
                                                            "stack"
   25 00000018         ;str r11, [r11]        ;???
   26 00000018 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
   27 0000001C         
   28 0000001C         
   29 0000001C         ;MAIN PROGRAM LOOP
   30 0000001C         ;
   31 0000001C         ;
   32 0000001C         ;
   33 0000001C         mainloop
   34 0000001C EB00002D        bl               updateDisplay
   35 00000020 E3A00000        ldr              r0, =0
   36 00000024 EB00001F        bl               press       ;Poll to see if but
                                                            ton has been presse
                                                            d
   37 00000028         ;Comparison value for Increase Current Number
   38 00000028 E3500000        cmp              r0, #0      ;if(press() != notP
                                                            ressed)
   39 0000002C 0A000002        beq              endSwitch
   40 00000030 E3500501        cmp              r0, #0x00400000 ;Comparison val



ARM Macro Assembler    Page 2 


                                                            ue for Decrease Cur
                                                            rent Number
   41 00000034 AA000001        bge              numberChange
   42 00000038 EA000002        b                operatorChange
   43 0000003C         endSwitch
   44 0000003C EAFFFFF6        b                mainloop
   45 00000040         
   46 00000040         ;BRANCH AND LINK TO SUBROUTINES
   47 00000040         ;Recuired as we need to branch and link
   48 00000040         ;Can get rid of this by calculating offset with the pc
   49 00000040         ;
   50 00000040         numberChange
   51 00000040         ;mov r1, r12
   52 00000040 EB000003        bl               numberChangeSub
   53 00000044 EAFFFFFC        b                endSwitch
   54 00000048         
   55 00000048         operatorChange
   56 00000048         ;mov r1, r12
   57 00000048 EB00000A        bl               operatorChangeSub
   58 0000004C EAFFFFFA        b                endSwitch
   59 00000050         
   60 00000050 EAFFFFFE 
                       stop    B                stop
   61 00000054         
   62 00000054         ;numberChange Subroutine
   63 00000054         ;
   64 00000054         ;R0 - button pressed
   65 00000054         ;R12 - current number
   66 00000054         ;
   67 00000054         ;Increses or decreases the current sum based
   68 00000054         ;on the button pressed
   69 00000054         numberChangeSub
   70 00000054 E92D4000        stmfd            sp!, {lr}   ;Save link register
                                                             to stack
   71 00000058 E3500502        cmp              r0, #0x00800000 ;if(buttonPress
                                                            ed != '+')
   72 0000005C 0A000001        beq              adding
   73 00000060         ;subtracting
   74 00000060 E24CC001        sub              r12, r12, #1 ;currentNumber--
   75 00000064 EA000000        b                endNumberChange
   76 00000068         adding                               ;else if(buttonPres
                                                            sed == '-')
   77 00000068 E28CC001        add              r12, r12, #1 ;currentNumber++
   78 0000006C         endNumberChange
   79 0000006C E1A0100C        mov              r1, r12
   80 00000070 EB000018        bl               updateDisplay
   81 00000074 E8BD8000        ldmfd            sp!, { pc}
   82 00000078         
   83 00000078         
   84 00000078         ;operatorChange Subroutine
   85 00000078         ;
   86 00000078         ;R0 - button pressed
   87 00000078         ;R12 - current number
   88 00000078         ;
   89 00000078         ;Adds a plus or minus to our stack based
   90 00000078         ;on the button pressed
   91 00000078         operatorChangeSub
   92 00000078 E92D4000        stmfd            sp!, {lr}
   93 0000007C E58BC000        str              r12, [r11]  ;Store current numb



ARM Macro Assembler    Page 3 


                                                            er to our "stack"
   94 00000080 E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress (full ascend
                                                            ing stack)
   95 00000084 E3500602        cmp              r0, #0x00200000 ;if(operator !=
                                                             '+')
   96 00000088 0A000002        beq              addition
   97 0000008C         ;subtraction
   98 0000008C E3A0302D        ldr              r3, ='-'
   99 00000090 E58B3000        str              r3, [r11]   ;pushToStack('-')
  100 00000094 EA000001        b                endOpChange
  101 00000098         addition
  102 00000098 E3A0302B        ldr              r3, ='+'    ;else if(operator =
                                                            = '+')
  103 0000009C E58B3000        str              r3, [r11]   ;pushToStack('+')
  104 000000A0         endOpChange
  105 000000A0 E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress
  106 000000A4 E8BD8000        ldmfd            sp!, { pc}
  107 000000A8         
  108 000000A8         ;press subroutine
  109 000000A8         ;polls the I/O pin register to see if a 
  110 000000A8         ;button has been pressed
  111 000000A8         press
  112 000000A8 E92D4000        stmfd            sp!, {lr}
  113 000000AC E59F007C        ldr              r0, =IO1PIN
  114 000000B0 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  115 000000B4 E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  116 000000B8 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  117 000000BC E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  118 000000C0 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  119 000000C4 E8BD8000        ldmfd            sp!, {pc}
  120 000000C8         
  121 000000C8         ;clearDisplay subroutine
  122 000000C8         ;Turns off all LEDS
  123 000000C8         clearDisplay
  124 000000C8 E92D40FF        stmfd            sp!, {r0-r7, lr}
  125 000000CC E59F1054        ldr              r1,=IO1SET
  126 000000D0 E5810000        str              r0,[r1]     ;Turn the LEDs off
  127 000000D4 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  128 000000D8         
  129 000000D8         ;updateDisplay subroutine
  130 000000D8         ;Updates the value displayed on the LEDS
  131 000000D8         updateDisplay
  132 000000D8 E92D40FF        stmfd            sp!, {r0-r7, lr}
  133 000000DC E3A00001        ldr              r0, =0x00000001
  134 000000E0 E1A00801        mov              r0, r1, lsl #16 ;Shift currentN
                                                            umber to the correc
                                                            t position to mask
  135 000000E4 E59F103C        ldr              r1,=IO1SET
  136 000000E8 E3A0280F        mov              r2, #0x000f0000
  137 000000EC E5812000        str              r2,[r1]     ;Turn the LEDs off
  138 000000F0         
  139 000000F0 E59F503C        ldr              r5,=40000000 ;Value for delay



ARM Macro Assembler    Page 4 


  140 000000F4         dloop
  141 000000F4 E3550000        cmp              r5, #0
  142 000000F8 DA000001        ble              enddloop    ;while(delay > 0){
  143 000000FC E2555001        subs             r5,r5,#1    ;   delay--
  144 00000100 EAFFFFFB        b                dloop       ;}
  145 00000104         enddloop
  146 00000104 E59F102C        ldr              r1,=IO1CLR
  147 00000108 E5810000        str              r0,[r1]     ;Turn on correct LE
                                                            D's
  148 0000010C         
  149 0000010C E59F5020        ldr              r5,=40000000 ;Value for delay
  150 00000110         dloop1
  151 00000110 E3550000        cmp              r5, #0
  152 00000114 DA000001        ble              enddloop1   ;while(delay > 0){
  153 00000118 E2555001        subs             r5,r5,#1    ;   delay--
  154 0000011C EAFFFFFB        b                dloop1      ;}
  155 00000120         enddloop1
  156 00000120 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  157 00000124         
  158 00000124         
  159 00000124         
  160 00000124 E0028018 
              E0028014 
              00000000 
              E0028010 
              02625A00 
              E002801C         AREA             DATA, READWRITE
  161 00000000         
  162 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    SUM     SPACE            50
  163 00000032         
  164 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
adding 00000068

Symbol: adding
   Definitions
      At line 76 in file App.s
   Uses
      At line 72 in file App.s
Comment: adding used once
addition 00000098

Symbol: addition
   Definitions
      At line 101 in file App.s
   Uses
      At line 96 in file App.s
Comment: addition used once
clearDisplay 000000C8

Symbol: clearDisplay
   Definitions
      At line 123 in file App.s
   Uses
      None
Comment: clearDisplay unused
dloop 000000F4

Symbol: dloop
   Definitions
      At line 140 in file App.s
   Uses
      At line 144 in file App.s
Comment: dloop used once
dloop1 00000110

Symbol: dloop1
   Definitions
      At line 150 in file App.s
   Uses
      At line 154 in file App.s
Comment: dloop1 used once
endNumberChange 0000006C

Symbol: endNumberChange
   Definitions
      At line 78 in file App.s
   Uses
      At line 75 in file App.s
Comment: endNumberChange used once
endOpChange 000000A0

Symbol: endOpChange



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 104 in file App.s
   Uses
      At line 100 in file App.s
Comment: endOpChange used once
endSwitch 0000003C

Symbol: endSwitch
   Definitions
      At line 43 in file App.s
   Uses
      At line 39 in file App.s
      At line 53 in file App.s
      At line 58 in file App.s

enddloop 00000104

Symbol: enddloop
   Definitions
      At line 145 in file App.s
   Uses
      At line 142 in file App.s
Comment: enddloop used once
enddloop1 00000120

Symbol: enddloop1
   Definitions
      At line 155 in file App.s
   Uses
      At line 152 in file App.s
Comment: enddloop1 used once
mainloop 0000001C

Symbol: mainloop
   Definitions
      At line 33 in file App.s
   Uses
      At line 44 in file App.s
Comment: mainloop used once
numberChange 00000040

Symbol: numberChange
   Definitions
      At line 50 in file App.s
   Uses
      At line 41 in file App.s
Comment: numberChange used once
numberChangeSub 00000054

Symbol: numberChangeSub
   Definitions
      At line 69 in file App.s
   Uses
      At line 52 in file App.s
Comment: numberChangeSub used once
operatorChange 00000048

Symbol: operatorChange
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 55 in file App.s
   Uses
      At line 42 in file App.s
Comment: operatorChange used once
operatorChangeSub 00000078

Symbol: operatorChangeSub
   Definitions
      At line 91 in file App.s
   Uses
      At line 57 in file App.s
Comment: operatorChangeSub used once
press 000000A8

Symbol: press
   Definitions
      At line 111 in file App.s
   Uses
      At line 36 in file App.s
Comment: press used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 00000050

Symbol: stop
   Definitions
      At line 60 in file App.s
   Uses
      At line 60 in file App.s
Comment: stop used once
updateDisplay 000000D8

Symbol: updateDisplay
   Definitions
      At line 131 in file App.s
   Uses
      At line 34 in file App.s
      At line 80 in file App.s

20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 160 in file App.s
   Uses
      None
Comment: DATA unused
SUM 00000000

Symbol: SUM
   Definitions
      At line 162 in file App.s
   Uses
      At line 24 in file App.s
Comment: SUM used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 17 in file App.s
   Uses
      At line 146 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 15 in file App.s
   Uses
      At line 19 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 14 in file App.s
   Uses
      At line 113 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 16 in file App.s
   Uses
      At line 22 in file App.s
      At line 125 in file App.s
      At line 135 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
362 symbols in table
