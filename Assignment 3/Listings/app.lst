


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ; INTIALISATION
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;
   14 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;I/O Pin Register A
                                                            ddress
   15 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ;Set Direction Of P
                                                            ins
   16 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ;Set Bits In Regist
                                                            er (Turn off LEDS)
   17 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ;Clear Bits In Regi
                                                            ster (Turn on LEDS)
                                                            
   18 00000000         
   19 00000000 E59F11B4        ldr              r1,=IO1DIR
   20 00000004 E3A0280F        ldr              r2,=0x000f0000 ;Select P1.19--P
                                                            1.16
   21 00000008 E5812000        str              r2,[r1]     ;Make them outputs
   22 0000000C E59F11AC        ldr              r1,=IO1SET
   23 00000010 E5812000        str              r2,[r1]     ;Turn the LEDs off 
                                                            (Set bits)
   24 00000014 E59FB1A8        ldr              r11, =SUM   ;Address in memory 
                                                            where we store our 
                                                            "stack"
   25 00000018 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
   26 0000001C         
   27 0000001C         
   28 0000001C         ;MAIN PROGRAM LOOP
   29 0000001C         ;
   30 0000001C         ;
   31 0000001C         ;
   32 0000001C         mainloop
   33 0000001C E3A00000        ldr              r0, =0
   34 00000020 EB000022        bl               press       ;Poll to see if but
                                                            ton has been presse
                                                            d
   35 00000024         ;Comparison value for Increase Current Number
   36 00000024         ;ldr r0, =0x00100000
   37 00000024 E3500001        cmp              r0, #1      ;if(press() != notP
                                                            ressed)
   38 00000028 0A000002        beq              endSwitch
   39 0000002C E3500602        cmp              r0, #0x00200000 ;Comparison val
                                                            ue for Decrease Cur



ARM Macro Assembler    Page 2 


                                                            rent Number
   40 00000030 DA000001        ble              numberChange
   41 00000034 EA000002        b                operatorChange
   42 00000038         endSwitch
   43 00000038 EAFFFFF7        b                mainloop
   44 0000003C         
   45 0000003C         ;BRANCH AND LINK TO SUBROUTINES
   46 0000003C         ;Recuired as we need to branch and link
   47 0000003C         ;Can get rid of this by calculating offset with the pc
   48 0000003C         ;
   49 0000003C         numberChange
   50 0000003C         ;mov r1, r12
   51 0000003C EB000003        bl               numberChangeSub
   52 00000040 EAFFFFFC        b                endSwitch
   53 00000044         
   54 00000044         operatorChange
   55 00000044         ;mov r1, r12
   56 00000044 EB00000A        bl               operatorChangeSub
   57 00000048 EAFFFFFA        b                endSwitch
   58 0000004C         
   59 0000004C EAFFFFFE 
                       stop    B                stop
   60 00000050         
   61 00000050         ;numberChange Subroutine
   62 00000050         ;
   63 00000050         ;R0 - button pressed
   64 00000050         ;R12 - current number
   65 00000050         ;
   66 00000050         ;Increses or decreases the current sum based
   67 00000050         ;on the button pressed
   68 00000050         numberChangeSub
   69 00000050 E92D4000        stmfd            sp!, {lr}   ;Save link register
                                                             to stack
   70 00000054 E3500601        cmp              r0, #0x00100000 ;if(buttonPress
                                                            ed != '+')
   71 00000058 0A000001        beq              adding
   72 0000005C         ;subtracting
   73 0000005C E24CC001        sub              r12, r12, #1 ;currentNumber--
   74 00000060 EA000000        b                endNumberChange
   75 00000064         adding                               ;else if(buttonPres
                                                            sed == '-')
   76 00000064 E28CC001        add              r12, r12, #1 ;currentNumber++
   77 00000068         endNumberChange
   78 00000068 E1A0100C        mov              r1, r12
   79 0000006C EB00002F        bl               updateDisplay
   80 00000070 E8BD8000        ldmfd            sp!, { pc}
   81 00000074         
   82 00000074         
   83 00000074         ;operatorChange Subroutine
   84 00000074         ;
   85 00000074         ;R0 - button pressed
   86 00000074         ;R12 - current number
   87 00000074         ;
   88 00000074         ;Adds a plus or minus to our stack based
   89 00000074         ;on the button pressed
   90 00000074         operatorChangeSub
   91 00000074 E92D4000        stmfd            sp!, {lr}
   92 00000078         ;check if we are reversing
   93 00000078 E2002001        and              r2, r0, #1  ;Mask out long pres



ARM Macro Assembler    Page 3 


                                                            s bit
   94 0000007C E3520001        cmp              r2, #1
   95 00000080 0AFFFFFF        beq              longPressOperator
   96 00000084         longPressOperator
   97 00000084 E58BC000        str              r12, [r11]  ;Store current numb
                                                            er to our "stack"
   98 00000088 E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress (full ascend
                                                            ing stack)
   99 0000008C E3500501        cmp              r0, #0x00400000 ;if(operator !=
                                                             '+')
  100 00000090 0A000002        beq              addition
  101 00000094         ;subtraction
  102 00000094 E3A0302D        ldr              r3, ='-'
  103 00000098 E58B3000        str              r3, [r11]   ;pushToStack('-')
  104 0000009C EA000001        b                endOpChange
  105 000000A0         addition
  106 000000A0 E3A0302B        ldr              r3, ='+'    ;else if(operator =
                                                            = '+')
  107 000000A4 E58B3000        str              r3, [r11]   ;pushToStack('+')
  108 000000A8         endOpChange
  109 000000A8 E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress
  110 000000AC E8BD8000        ldmfd            sp!, { pc}
  111 000000B0         
  112 000000B0         ;press subroutine
  113 000000B0         ;polls the I/O pin register to see if a 
  114 000000B0         ;button has been pressed
  115 000000B0         press
  116 000000B0 E92D4000        stmfd            sp!, {lr}
  117 000000B4 E59F010C        ldr              r0, =IO1PIN
  118 000000B8 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  119 000000BC E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  120 000000C0 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  121 000000C4 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  122 000000C8 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  123 000000CC EB000000        bl               longPress
  124 000000D0 E8BD8000        ldmfd            sp!, {pc}
  125 000000D4         
  126 000000D4         ;longPress subroutine
  127 000000D4         ;checks if press duration is longer than just one press
  128 000000D4         longPress
  129 000000D4 E92D4000        stmfd            sp!, {lr}
  130 000000D8 E1A02000        mov              r2, r0      ;Temp store intial 
                                                            button press
  131 000000DC         ;wait delay time
  132 000000DC E59F50E8        ldr              r5,=50000000 ;Value for delay
  133 000000E0         dloop2
  134 000000E0 E3550000        cmp              r5, #0
  135 000000E4 DA000001        ble              enddloop2   ;while(delay > 0){
  136 000000E8 E2555001        subs             r5,r5,#1    ;   delay--
  137 000000EC EAFFFFFB        b                dloop2      ;}
  138 000000F0         enddloop2
  139 000000F0 E59F00D0        ldr              r0, =IO1PIN



ARM Macro Assembler    Page 4 


  140 000000F4 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  141 000000F8 E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  142 000000FC E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  143 00000100 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  144 00000104 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  145 00000108 E1500002        cmp              r0, r2
  146 0000010C 1A000001        bne              notLong
  147 00000110         ;long press has occured
  148 00000110 E3800001        orr              r0, r0, #1  ;Note this is a lon
                                                            g press
  149 00000114 EA000000        b                endLong
  150 00000118         notLong
  151 00000118 E1A00002        mov              r0, r2      ;button = temp
  152 0000011C         endLong
  153 0000011C E8BD8000        ldmfd            sp!, {pc}
  154 00000120         
  155 00000120         ;clearDisplay subroutine
  156 00000120         ;Turns off all LEDS
  157 00000120         clearDisplay
  158 00000120 E92D40FF        stmfd            sp!, {r0-r7, lr}
  159 00000124 E59F1094        ldr              r1,=IO1SET
  160 00000128 E5810000        str              r0,[r1]     ;Turn the LEDs off
  161 0000012C E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  162 00000130         
  163 00000130         ;updateDisplay subroutine
  164 00000130         ;Updates the value displayed on the LEDS
  165 00000130         updateDisplay
  166 00000130 E92D40FF        stmfd            sp!, {r0-r7, lr}
  167 00000134 E1A00801        mov              r0, r1, lsl #16 ;Shift currentN
                                                            umber to the correc
                                                            t position to mask
  168 00000138 EB00000F        bl               reverseNumber
  169 0000013C E59F107C        ldr              r1,=IO1SET
  170 00000140 E3A0280F        mov              r2, #0x000f0000
  171 00000144 E5812000        str              r2,[r1]     ;Turn the LEDs off
  172 00000148         
  173 00000148 E59F5080        ldr              r5,=50000   ;Value for delay
  174 0000014C         dloop
  175 0000014C E3550000        cmp              r5, #0
  176 00000150 DA000001        ble              enddloop    ;while(delay > 0){
  177 00000154 E2555001        subs             r5,r5,#1    ;   delay--
  178 00000158 EAFFFFFB        b                dloop       ;}
  179 0000015C         enddloop
  180 0000015C E59F1070        ldr              r1,=IO1CLR
  181 00000160 E5810000        str              r0,[r1]     ;Turn on correct LE
                                                            D's
  182 00000164         
  183 00000164 E59F506C        ldr              r5,=5000000 ;Value for delay
  184 00000168         dloop1
  185 00000168 E3550000        cmp              r5, #0
  186 0000016C DA000001        ble              enddloop1   ;while(delay > 0){
  187 00000170 E2555001        subs             r5,r5,#1    ;   delay--
  188 00000174 EAFFFFFB        b                dloop1      ;}
  189 00000178         enddloop1



ARM Macro Assembler    Page 5 


  190 00000178 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  191 0000017C         
  192 0000017C         ;Reverse Number Subroutine
  193 0000017C         ;Reverses a 4 bit binary number placing it
  194 0000017C         ;in the correct position to turn on LEDS
  195 0000017C         ;
  196 0000017C         ;R0 number being converted
  197 0000017C         ;
  198 0000017C         reverseNumber
  199 0000017C E92D41F8        stmfd            SP!, {lr, r3-r8} ;store registe
                                                            rs to stack
  200 00000180 E3A03000        ldr              r3, =0      ;count = 0
  201 00000184 E3A04000        ldr              r4, =0      ;reversed number 
  202 00000188         reverse
  203 00000188 E3530024        cmp              r3, #36     ;while(count < numb
                                                            er of digits to rev
                                                            erse){
  204 0000018C AA000008        bge              endreverse
  205 00000190 E2005001        and              r5, r0, #1  ;mask out least sig
                                                            nificant bit
  206 00000194 E1A000A0        mov              r0, r0, lsr #1 ;shift original 
                                                            number right 1 bit
  207 00000198 E1A04084        mov              r4, r4, lsl #1 ;shift reversed 
                                                            number left 1 bit
  208 0000019C E3550001        cmp              r5, #1      ;if(masked bit == 1
                                                            ){
  209 000001A0 0A000000        beq              push1
  210 000001A4 EA000000        b                endpush
  211 000001A8         push1
  212 000001A8 E3844001        orr              r4, r4, #1  ;mask in a 1
  213 000001AC         endpush
  214 000001AC E2833001        add              r3, r3, #1  ;count++
  215 000001B0 EAFFFFF4        b                reverse
  216 000001B4         endreverse
  217 000001B4 E1A00004        mov              r0, r4
  218 000001B8 E8BD81F8        ldmfd            SP!, {pc, r3-r8}
  219 000001BC         
  220 000001BC         
  221 000001BC         
  222 000001BC E0028018 
              E0028014 
              00000000 
              E0028010 
              02FAF080 
              0000C350 
              E002801C 
              004C4B40         AREA             DATA, READWRITE
  223 00000000         
  224 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 6 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    SUM     SPACE            50
  225 00000032         
  226 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
adding 00000064

Symbol: adding
   Definitions
      At line 75 in file App.s
   Uses
      At line 71 in file App.s
Comment: adding used once
addition 000000A0

Symbol: addition
   Definitions
      At line 105 in file App.s
   Uses
      At line 100 in file App.s
Comment: addition used once
clearDisplay 00000120

Symbol: clearDisplay
   Definitions
      At line 157 in file App.s
   Uses
      None
Comment: clearDisplay unused
dloop 0000014C

Symbol: dloop
   Definitions
      At line 174 in file App.s
   Uses
      At line 178 in file App.s
Comment: dloop used once
dloop1 00000168

Symbol: dloop1
   Definitions
      At line 184 in file App.s
   Uses
      At line 188 in file App.s
Comment: dloop1 used once
dloop2 000000E0

Symbol: dloop2
   Definitions
      At line 133 in file App.s
   Uses
      At line 137 in file App.s
Comment: dloop2 used once
endLong 0000011C

Symbol: endLong



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 152 in file App.s
   Uses
      At line 149 in file App.s
Comment: endLong used once
endNumberChange 00000068

Symbol: endNumberChange
   Definitions
      At line 77 in file App.s
   Uses
      At line 74 in file App.s
Comment: endNumberChange used once
endOpChange 000000A8

Symbol: endOpChange
   Definitions
      At line 108 in file App.s
   Uses
      At line 104 in file App.s
Comment: endOpChange used once
endSwitch 00000038

Symbol: endSwitch
   Definitions
      At line 42 in file App.s
   Uses
      At line 38 in file App.s
      At line 52 in file App.s
      At line 57 in file App.s

enddloop 0000015C

Symbol: enddloop
   Definitions
      At line 179 in file App.s
   Uses
      At line 176 in file App.s
Comment: enddloop used once
enddloop1 00000178

Symbol: enddloop1
   Definitions
      At line 189 in file App.s
   Uses
      At line 186 in file App.s
Comment: enddloop1 used once
enddloop2 000000F0

Symbol: enddloop2
   Definitions
      At line 138 in file App.s
   Uses
      At line 135 in file App.s
Comment: enddloop2 used once
endpush 000001AC

Symbol: endpush
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 213 in file App.s
   Uses
      At line 210 in file App.s
Comment: endpush used once
endreverse 000001B4

Symbol: endreverse
   Definitions
      At line 216 in file App.s
   Uses
      At line 204 in file App.s
Comment: endreverse used once
longPress 000000D4

Symbol: longPress
   Definitions
      At line 128 in file App.s
   Uses
      At line 123 in file App.s
Comment: longPress used once
longPressOperator 00000084

Symbol: longPressOperator
   Definitions
      At line 96 in file App.s
   Uses
      At line 95 in file App.s
Comment: longPressOperator used once
mainloop 0000001C

Symbol: mainloop
   Definitions
      At line 32 in file App.s
   Uses
      At line 43 in file App.s
Comment: mainloop used once
notLong 00000118

Symbol: notLong
   Definitions
      At line 150 in file App.s
   Uses
      At line 146 in file App.s
Comment: notLong used once
numberChange 0000003C

Symbol: numberChange
   Definitions
      At line 49 in file App.s
   Uses
      At line 40 in file App.s
Comment: numberChange used once
numberChangeSub 00000050

Symbol: numberChangeSub
   Definitions
      At line 68 in file App.s
   Uses
      At line 51 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: numberChangeSub used once
operatorChange 00000044

Symbol: operatorChange
   Definitions
      At line 54 in file App.s
   Uses
      At line 41 in file App.s
Comment: operatorChange used once
operatorChangeSub 00000074

Symbol: operatorChangeSub
   Definitions
      At line 90 in file App.s
   Uses
      At line 56 in file App.s
Comment: operatorChangeSub used once
press 000000B0

Symbol: press
   Definitions
      At line 115 in file App.s
   Uses
      At line 34 in file App.s
Comment: press used once
push1 000001A8

Symbol: push1
   Definitions
      At line 211 in file App.s
   Uses
      At line 209 in file App.s
Comment: push1 used once
reverse 00000188

Symbol: reverse
   Definitions
      At line 202 in file App.s
   Uses
      At line 215 in file App.s
Comment: reverse used once
reverseNumber 0000017C

Symbol: reverseNumber
   Definitions
      At line 198 in file App.s
   Uses
      At line 168 in file App.s
Comment: reverseNumber used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 0000004C




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: stop
   Definitions
      At line 59 in file App.s
   Uses
      At line 59 in file App.s
Comment: stop used once
updateDisplay 00000130

Symbol: updateDisplay
   Definitions
      At line 165 in file App.s
   Uses
      At line 79 in file App.s
Comment: updateDisplay used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 222 in file App.s
   Uses
      None
Comment: DATA unused
SUM 00000000

Symbol: SUM
   Definitions
      At line 224 in file App.s
   Uses
      At line 24 in file App.s
Comment: SUM used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 17 in file App.s
   Uses
      At line 180 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 15 in file App.s
   Uses
      At line 19 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 14 in file App.s
   Uses
      At line 117 in file App.s
      At line 139 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 16 in file App.s
   Uses
      At line 22 in file App.s
      At line 159 in file App.s
      At line 169 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
373 symbols in table
