


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ; INTIALISATION
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;
   14 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;I/O Pin Register A
                                                            ddress
   15 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ;Set Direction Of P
                                                            ins
   16 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ;Set Bits In Regist
                                                            er (Turn off LEDS)
   17 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ;Clear Bits In Regi
                                                            ster (Turn on LEDS)
                                                            
   18 00000000         
   19 00000000 E59F1274        ldr              r1,=IO1DIR
   20 00000004 E3A0280F        ldr              r2,=0x000f0000 ;Select P1.19--P
                                                            1.16
   21 00000008 E5812000        str              r2,[r1]     ;Make them outputs
   22 0000000C E59F126C        ldr              r1,=IO1SET
   23 00000010 E5812000        str              r2,[r1]     ;Turn the LEDs off 
                                                            (Set bits)
   24 00000014 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
   25 00000018 E3A0B000        mov              r11, #0     ;R11 - sum
   26 0000001C E3A0A000        mov              r10, #0     ;R10 - operator
   27 00000020 E3A09000        mov              r9, #0      ;R9 - last number
   28 00000024 E3A08000        mov              r8, #0      ;R8 - last button
   29 00000028         
   30 00000028         ;MAIN PROGRAM LOOP
   31 00000028         ;
   32 00000028         ;
   33 00000028         ;
   34 00000028         mainloop
   35 00000028 E3A00000        ldr              r0, =0
   36 0000002C EA000008        b                pressCheck  ;Poll to see if but
                                                            ton has been presse
                                                            d
   37 00000030         endPressCheck
   38 00000030 E3500000        cmp              r0, #0      ;if(press() != notP
                                                            ressed)
   39 00000034 0A000002        beq              endSwitch
   40 00000038 E3500602        cmp              r0, #0x00200000 ;Comparison val
                                                            ue for Decrease Cur
                                                            rent Number



ARM Macro Assembler    Page 2 


   41 0000003C DA000008        ble              numberChange
   42 00000040 EA000009        b                operatorChange
   43 00000044         endSwitch
   44 00000044 E3570000        cmp              r7, #0
   45 00000048 0A000000        beq              endMain
   46 0000004C E3A07000        mov              r7, #0      ;Reset clear flag
   47 00000050         endMain
   48 00000050 EAFFFFF4        b                mainloop
   49 00000054         
   50 00000054         ;BRANCH AND LINK TO SUBROUTINES
   51 00000054         ;Required as we need to branch and link
   52 00000054         ;Can get rid of this by calculating offset with the pc
   53 00000054         ;
   54 00000054         
   55 00000054         ;Branch to the press subroutine
   56 00000054         pressCheck
   57 00000054 EB000029        bl               press
   58 00000058 E3570001        cmp              r7, #1      ;check if we just c
                                                            leared
   59 0000005C 0AFFFFF8        beq              endSwitch   ;if we just cleared
                                                             skip normal operat
                                                            ion check
   60 00000060 EAFFFFF2        b                endPressCheck ;if we didn't cle
                                                            ar anything find ou
                                                            t what operation it
                                                             is
   61 00000064         
   62 00000064         ;Branch to numberChange subroutine
   63 00000064         numberChange
   64 00000064 EB000003        bl               numberChangeSub
   65 00000068 EAFFFFF5        b                endSwitch
   66 0000006C         
   67 0000006C         ;Branch to numberChange subroutine
   68 0000006C         operatorChange
   69 0000006C EB00000B        bl               operatorChangeSub
   70 00000070 EAFFFFF3        b                endSwitch
   71 00000074         
   72 00000074 EAFFFFFE 
                       stop    B                stop
   73 00000078         
   74 00000078         ;numberChange Subroutine
   75 00000078         ;
   76 00000078         ;R0 - button pressed
   77 00000078         ;R12 - current number
   78 00000078         ;
   79 00000078         ;Increses or decreases the current sum based
   80 00000078         ;on the button pressed
   81 00000078         numberChangeSub
   82 00000078 E92D4000        stmfd            sp!, {lr}   ;Save link register
                                                             to stack
   83 0000007C E3A08000        mov              r8, #0      ;last button = numb
                                                            er
   84 00000080 E3500601        cmp              r0, #0x00100000 ;if(buttonPress
                                                            ed != '+')
   85 00000084 0A000001        beq              adding
   86 00000088         ;subtracting
   87 00000088 E24CC001        sub              r12, r12, #1 ;currentNumber--
   88 0000008C EA000000        b                endNumberChange
   89 00000090         adding                               ;else if(buttonPres



ARM Macro Assembler    Page 3 


                                                            sed == '-')
   90 00000090 E28CC001        add              r12, r12, #1 ;currentNumber++
   91 00000094         endNumberChange
   92 00000094 E1A0100C        mov              r1, r12
   93 00000098 EB000054        bl               updateDisplay
   94 0000009C E8BD8000        ldmfd            sp!, { pc}
   95 000000A0         
   96 000000A0         
   97 000000A0         ;operatorChange Subroutine
   98 000000A0         ;
   99 000000A0         ;R0 - button pressed
  100 000000A0         ;R12 - current number
  101 000000A0         ;
  102 000000A0         ;Adds a plus or minus to our stack based
  103 000000A0         ;on the button pressed
  104 000000A0         operatorChangeSub
  105 000000A0 E92D4000        stmfd            sp!, {lr}
  106 000000A4 E3A08001        mov              r8, #1      ;last button = oper
                                                            ator
  107 000000A8 E35A0000        cmp              r10, #0     ;if(firstOp) WE ARE
                                                             PROBABLY UPDATING 
                                                            R10 AND THIS DOESNT
                                                             WORK ANYMORE AS A 
                                                            RESULT
  108 000000AC 0A000000        beq              firstNumber
  109 000000B0 EA000001        b                endFirstNumber
  110 000000B4         firstNumber
  111 000000B4 E1A0B00C        mov              r11, r12    ;sum = currentNumbe
                                                            r
  112 000000B8 EA000004        b                updateCurrentOp
  113 000000BC         endFirstNumber
  114 000000BC E35A002B        cmp              r10, #'+'
  115 000000C0 1A000001        bne              minus
  116 000000C4 E08BB00C        add              r11, r11, r12 ;add
  117 000000C8 EA000000        b                updateCurrentOp
  118 000000CC         minus
  119 000000CC E04BB00C        sub              r11, r11, r12 ;sub
  120 000000D0         
  121 000000D0         
  122 000000D0         
  123 000000D0         updateCurrentOp
  124 000000D0 E3500501        cmp              r0, #0x00400000 ;if(operator !=
                                                             '+')
  125 000000D4 0A000002        beq              addition
  126 000000D8         ;subtraction
  127 000000D8 E3A0A02D        ldr              r10, ='-'   ;operator = -
  128 000000DC E1A0900C        mov              r9, r12     ;lastNumber = curre
                                                            ntNumber
  129 000000E0 EA000002        b                endOpChange
  130 000000E4         addition
  131 000000E4 E3A0A02B        ldr              r10, ='+'   ;else if(operator =
                                                            = '+')
  132 000000E8 E1E0900C        mvn              r9, r12
  133 000000EC E2899001        add              r9, r9, #1  ;last number = -cur
                                                            rentNumber
  134 000000F0         endOpChange
  135 000000F0 E3A0C000        mov              r12, #0     ;currentNumber = 0 
                                                            DO I NEED THIS???
  136 000000F4 E1A0100B        mov              r1, r11



ARM Macro Assembler    Page 4 


  137 000000F8 EB00003C        bl               updateDisplay
  138 000000FC E8BD8000        ldmfd            sp!, { pc}
  139 00000100         
  140 00000100         ;press subroutine
  141 00000100         ;polls the I/O pin register to see if a 
  142 00000100         ;button has been pressed
  143 00000100         press
  144 00000100 E92D4000        stmfd            sp!, {lr}
  145 00000104 E59F0178        ldr              r0, =IO1PIN
  146 00000108 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  147 0000010C E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  148 00000110 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  149 00000114 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  150 00000118 E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  151 0000011C E3500501        cmp              r0, #0x00400000 ;if(operatorPre
                                                            ssed)
  152 00000120 AA000000        bge              branchToLongPress ;check for lo
                                                            ng press
  153 00000124         endLongPressBranch
  154 00000124 E8BD8000        ldmfd            sp!, {pc}
  155 00000128         
  156 00000128         ;Branch to long press subroutine
  157 00000128         branchToLongPress
  158 00000128 EB000000        bl               longPress
  159 0000012C EAFFFFFC        b                endLongPressBranch
  160 00000130         
  161 00000130         ;long press subroutine
  162 00000130         ;polls the I/O pin register to see if a 
  163 00000130         ;button has been long pressed
  164 00000130         longPress
  165 00000130 E92D4041        stmfd            sp!, {r0,r6,lr}
  166 00000134 E3A05000        mov              r5,#0       ;pressDuration
  167 00000138 E59F6148        ldr              r6, =50000000 ;maxLongPress
  168 0000013C E1A07000        mov              r7, r0      ;tempButton = butto
                                                            nPressed
  169 00000140         dloop3
  170 00000140 E1550006        cmp              r5, r6      ;while(pressDuratio
                                                            n < maxLongPress)
  171 00000144 0A00000C        beq              enddloop3
  172 00000148 E3500501        cmp              r0, #0x00400000 ;if(buttonPress
                                                            ed == '+' || button
                                                            Pressed == '-')    
                                                              
  173 0000014C BA00000A        blt              enddloop3
  174 00000150 E59F012C        ldr              r0, =IO1PIN
  175 00000154 E5900000        ldr              r0, [r0]    ;Poll Pin Register
  176 00000158 E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  177 0000015C E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  178 00000160 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  179 00000164 E0000001        and              r0, r0, r1  ;Mask out other bit



ARM Macro Assembler    Page 5 


                                                            s we don't need
  180 00000168         updateButton
  181 00000168 E3500000        cmp              r0, #0      ;if(buttonPressed)
  182 0000016C 0A000000        beq              endUpdateButton
  183 00000170 E1A07000        mov              r7, r0      ;tempButton = butto
                                                            nPressed
  184 00000174         endUpdateButton
  185 00000174         
  186 00000174 E2855001        add              r5,r5,#1    ;pressDuration++
  187 00000178 EAFFFFF0        b                dloop3      ;
  188 0000017C         enddloop3
  189 0000017C         
  190 0000017C E59F6108        ldr              r6, =500000 ;longPress comparis
                                                            on value
  191 00000180 E1550006        cmp              r5, r6      ;if(pressDuration >
                                                            = comparisionValue
  192 00000184 BA000004        blt              endLongPress
  193 00000188 E3570502        cmp              r7, #0x00800000
  194 0000018C 0A000006        beq              clearAll    ;if(operator == '-'
                                                            )
  195 00000190 EB00000E        bl               clearLastSub ;if(operator == '+
                                                            ')
  196 00000194         endClear
  197 00000194 E3A07001        mov              r7, #1      ;lastOperation = cl
                                                            ear
  198 00000198 EA000000        b                theActualEnd
  199 0000019C         endLongPress
  200 0000019C E3A07000        mov              r7, #0      ;lastOperation = no
                                                            t clear
  201 000001A0         theActualEnd
  202 000001A0 E1A0100B        mov              r1, r11
  203 000001A4 EB000011        bl               updateDisplay
  204 000001A8 E8BD8041        ldmfd            sp!, {r0,r6,pc}
  205 000001AC         
  206 000001AC         clearAll
  207 000001AC EB000000        bl               clearAllSub
  208 000001B0 EAFFFFF7        b                endClear
  209 000001B4         
  210 000001B4         clearAllSub
  211 000001B4 E92D4000        stmfd            sp!, {lr}
  212 000001B8 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
  213 000001BC E3A0B000        mov              r11, #0     ;R11 - sum
  214 000001C0 E3A0A000        mov              r10, #0     ;R10 - operator
  215 000001C4 E3A09000        mov              r9, #0      ;R9 - last number
  216 000001C8 E3A08000        mov              r8, #0      ;R8 - last button
  217 000001CC E8BD8000        ldmfd            sp!, {pc}
  218 000001D0         
  219 000001D0         clearLastSub
  220 000001D0 E92D4000        stmfd            sp!, {lr}
  221 000001D4 E3580000        cmp              r8, #0      ;if(lastButton == n
                                                            umber)
  222 000001D8 0A000000        beq              numberLast
  223 000001DC E08BB009        add              r11, r11, r9 ;update sum
  224 000001E0         numberLast
  225 000001E0         ;mov r10, #0        
  226 000001E0 E3A09000        mov              r9, #0
  227 000001E4 E3A08000        mov              r8, #0



ARM Macro Assembler    Page 6 


  228 000001E8 E3A0C000        mov              r12, #0
  229 000001EC E8BD8000        ldmfd            sp!, {pc}
  230 000001F0         
  231 000001F0         ;updateDisplay subroutine
  232 000001F0         ;Updates the value displayed on the LEDS
  233 000001F0         updateDisplay
  234 000001F0 E92D40FF        stmfd            sp!, {r0-r7, lr}
  235 000001F4 E1A00801        mov              r0, r1, lsl #16 ;Shift currentN
                                                            umber to the correc
                                                            t position to mask
  236 000001F8 EB00000F        bl               reverseNumber
  237 000001FC E59F107C        ldr              r1,=IO1SET
  238 00000200 E3A0280F        mov              r2, #0x000f0000
  239 00000204 E5812000        str              r2,[r1]     ;Turn the LEDs off
  240 00000208         
  241 00000208 E59F5080        ldr              r5,=50000   ;Value for delay
  242 0000020C         dloop
  243 0000020C E3550000        cmp              r5, #0
  244 00000210 DA000001        ble              enddloop    ;while(delay > 0){
  245 00000214 E2555001        subs             r5,r5,#1    ;   delay--
  246 00000218 EAFFFFFB        b                dloop       ;}
  247 0000021C         enddloop
  248 0000021C E59F1070        ldr              r1,=IO1CLR
  249 00000220 E5810000        str              r0,[r1]     ;Turn on correct LE
                                                            D's
  250 00000224         
  251 00000224 E59F506C        ldr              r5,=5000000 ;Value for delay
  252 00000228         dloop1
  253 00000228 E3550000        cmp              r5, #0
  254 0000022C DA000001        ble              enddloop1   ;while(delay > 0){
  255 00000230 E2555001        subs             r5,r5,#1    ;   delay--
  256 00000234 EAFFFFFB        b                dloop1      ;}
  257 00000238         enddloop1
  258 00000238 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  259 0000023C         
  260 0000023C         ;Reverse Number Subroutine
  261 0000023C         ;Reverses a 4 bit binary number placing it
  262 0000023C         ;in the correct position to turn on LEDS
  263 0000023C         ;
  264 0000023C         ;R0 number being converted
  265 0000023C         ;
  266 0000023C         reverseNumber
  267 0000023C E92D41F8        stmfd            SP!, {lr, r3-r8} ; store regist
                                                            ers to stack
  268 00000240 E3A03000        ldr              r3, =0      ; count = 0
  269 00000244 E3A04000        ldr              r4, =0      ; reversed number 
  270 00000248         reverse
  271 00000248 E3530024        cmp              r3, #36     ; while(count < num
                                                            ber of digits to re
                                                            verse){
  272 0000024C AA000008        bge              endreverse
  273 00000250 E2005001        and              r5, r0, #1  ; mask out least si
                                                            gnificant bit
  274 00000254 E1A000A0        mov              r0, r0, lsr #1 ; shift original
                                                             number right 1 bit
                                                            
  275 00000258 E1A04084        mov              r4, r4, lsl #1 ; shift reversed
                                                             number left 1 bit
  276 0000025C E3550001        cmp              r5, #1      ; if(masked bit == 



ARM Macro Assembler    Page 7 


                                                            1){
  277 00000260 0A000000        beq              push1
  278 00000264 EA000000        b                endpush
  279 00000268         push1
  280 00000268 E3844001        orr              r4, r4, #1  ; mask in a 1
  281 0000026C         endpush
  282 0000026C E2833001        add              r3, r3, #1  ; count++
  283 00000270 EAFFFFF4        b                reverse
  284 00000274         endreverse
  285 00000274 E1A00004        mov              r0, r4
  286 00000278 E8BD81F8        ldmfd            SP!, {pc, r3-r8}
  287 0000027C         
  288 0000027C                 END
              E0028018 
              E0028014 
              E0028010 
              02FAF080 
              0007A120 
              0000C350 
              E002801C 
              004C4B40 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
adding 00000090

Symbol: adding
   Definitions
      At line 89 in file App.s
   Uses
      At line 85 in file App.s
Comment: adding used once
addition 000000E4

Symbol: addition
   Definitions
      At line 130 in file App.s
   Uses
      At line 125 in file App.s
Comment: addition used once
branchToLongPress 00000128

Symbol: branchToLongPress
   Definitions
      At line 157 in file App.s
   Uses
      At line 152 in file App.s
Comment: branchToLongPress used once
clearAll 000001AC

Symbol: clearAll
   Definitions
      At line 206 in file App.s
   Uses
      At line 194 in file App.s
Comment: clearAll used once
clearAllSub 000001B4

Symbol: clearAllSub
   Definitions
      At line 210 in file App.s
   Uses
      At line 207 in file App.s
Comment: clearAllSub used once
clearLastSub 000001D0

Symbol: clearLastSub
   Definitions
      At line 219 in file App.s
   Uses
      At line 195 in file App.s
Comment: clearLastSub used once
dloop 0000020C

Symbol: dloop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 242 in file App.s
   Uses
      At line 246 in file App.s
Comment: dloop used once
dloop1 00000228

Symbol: dloop1
   Definitions
      At line 252 in file App.s
   Uses
      At line 256 in file App.s
Comment: dloop1 used once
dloop3 00000140

Symbol: dloop3
   Definitions
      At line 169 in file App.s
   Uses
      At line 187 in file App.s
Comment: dloop3 used once
endClear 00000194

Symbol: endClear
   Definitions
      At line 196 in file App.s
   Uses
      At line 208 in file App.s
Comment: endClear used once
endFirstNumber 000000BC

Symbol: endFirstNumber
   Definitions
      At line 113 in file App.s
   Uses
      At line 109 in file App.s
Comment: endFirstNumber used once
endLongPress 0000019C

Symbol: endLongPress
   Definitions
      At line 199 in file App.s
   Uses
      At line 192 in file App.s
Comment: endLongPress used once
endLongPressBranch 00000124

Symbol: endLongPressBranch
   Definitions
      At line 153 in file App.s
   Uses
      At line 159 in file App.s
Comment: endLongPressBranch used once
endMain 00000050

Symbol: endMain
   Definitions
      At line 47 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 45 in file App.s
Comment: endMain used once
endNumberChange 00000094

Symbol: endNumberChange
   Definitions
      At line 91 in file App.s
   Uses
      At line 88 in file App.s
Comment: endNumberChange used once
endOpChange 000000F0

Symbol: endOpChange
   Definitions
      At line 134 in file App.s
   Uses
      At line 129 in file App.s
Comment: endOpChange used once
endPressCheck 00000030

Symbol: endPressCheck
   Definitions
      At line 37 in file App.s
   Uses
      At line 60 in file App.s
Comment: endPressCheck used once
endSwitch 00000044

Symbol: endSwitch
   Definitions
      At line 43 in file App.s
   Uses
      At line 39 in file App.s
      At line 59 in file App.s
      At line 65 in file App.s
      At line 70 in file App.s

endUpdateButton 00000174

Symbol: endUpdateButton
   Definitions
      At line 184 in file App.s
   Uses
      At line 182 in file App.s
Comment: endUpdateButton used once
enddloop 0000021C

Symbol: enddloop
   Definitions
      At line 247 in file App.s
   Uses
      At line 244 in file App.s
Comment: enddloop used once
enddloop1 00000238

Symbol: enddloop1
   Definitions
      At line 257 in file App.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 254 in file App.s
Comment: enddloop1 used once
enddloop3 0000017C

Symbol: enddloop3
   Definitions
      At line 188 in file App.s
   Uses
      At line 171 in file App.s
      At line 173 in file App.s

endpush 0000026C

Symbol: endpush
   Definitions
      At line 281 in file App.s
   Uses
      At line 278 in file App.s
Comment: endpush used once
endreverse 00000274

Symbol: endreverse
   Definitions
      At line 284 in file App.s
   Uses
      At line 272 in file App.s
Comment: endreverse used once
firstNumber 000000B4

Symbol: firstNumber
   Definitions
      At line 110 in file App.s
   Uses
      At line 108 in file App.s
Comment: firstNumber used once
longPress 00000130

Symbol: longPress
   Definitions
      At line 164 in file App.s
   Uses
      At line 158 in file App.s
Comment: longPress used once
mainloop 00000028

Symbol: mainloop
   Definitions
      At line 34 in file App.s
   Uses
      At line 48 in file App.s
Comment: mainloop used once
minus 000000CC

Symbol: minus
   Definitions
      At line 118 in file App.s
   Uses
      At line 115 in file App.s
Comment: minus used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

numberChange 00000064

Symbol: numberChange
   Definitions
      At line 63 in file App.s
   Uses
      At line 41 in file App.s
Comment: numberChange used once
numberChangeSub 00000078

Symbol: numberChangeSub
   Definitions
      At line 81 in file App.s
   Uses
      At line 64 in file App.s
Comment: numberChangeSub used once
numberLast 000001E0

Symbol: numberLast
   Definitions
      At line 224 in file App.s
   Uses
      At line 222 in file App.s
Comment: numberLast used once
operatorChange 0000006C

Symbol: operatorChange
   Definitions
      At line 68 in file App.s
   Uses
      At line 42 in file App.s
Comment: operatorChange used once
operatorChangeSub 000000A0

Symbol: operatorChangeSub
   Definitions
      At line 104 in file App.s
   Uses
      At line 69 in file App.s
Comment: operatorChangeSub used once
press 00000100

Symbol: press
   Definitions
      At line 143 in file App.s
   Uses
      At line 57 in file App.s
Comment: press used once
pressCheck 00000054

Symbol: pressCheck
   Definitions
      At line 56 in file App.s
   Uses
      At line 36 in file App.s
Comment: pressCheck used once
push1 00000268

Symbol: push1



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 279 in file App.s
   Uses
      At line 277 in file App.s
Comment: push1 used once
reverse 00000248

Symbol: reverse
   Definitions
      At line 270 in file App.s
   Uses
      At line 283 in file App.s
Comment: reverse used once
reverseNumber 0000023C

Symbol: reverseNumber
   Definitions
      At line 266 in file App.s
   Uses
      At line 236 in file App.s
Comment: reverseNumber used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 00000074

Symbol: stop
   Definitions
      At line 72 in file App.s
   Uses
      At line 72 in file App.s
Comment: stop used once
theActualEnd 000001A0

Symbol: theActualEnd
   Definitions
      At line 201 in file App.s
   Uses
      At line 198 in file App.s
Comment: theActualEnd used once
updateButton 00000168

Symbol: updateButton
   Definitions
      At line 180 in file App.s
   Uses
      None
Comment: updateButton unused
updateCurrentOp 000000D0

Symbol: updateCurrentOp
   Definitions
      At line 123 in file App.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 112 in file App.s
      At line 117 in file App.s

updateDisplay 000001F0

Symbol: updateDisplay
   Definitions
      At line 233 in file App.s
   Uses
      At line 93 in file App.s
      At line 137 in file App.s
      At line 203 in file App.s

45 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 17 in file App.s
   Uses
      At line 248 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 15 in file App.s
   Uses
      At line 19 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 14 in file App.s
   Uses
      At line 145 in file App.s
      At line 174 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 16 in file App.s
   Uses
      At line 22 in file App.s
      At line 237 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
385 symbols in table
