


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ; INTIALISATION
   11 00000000         ;
   12 00000000         ;
   13 00000000         ;
   14 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;I/O Pin Register A
                                                            ddress
   15 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ;Set Direction Of P
                                                            ins
   16 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ;Set Bits In Regist
                                                            er (Turn off LEDS)
   17 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ;Clear Bits In Regi
                                                            ster (Turn on LEDS)
                                                            
   18 00000000         
   19 00000000 E59F1158        ldr              r1,=IO1DIR
   20 00000004 E3A0280F        ldr              r2,=0x000f0000 ;Select P1.19--P
                                                            1.16
   21 00000008 E5812000        str              r2,[r1]     ;Make them outputs
   22 0000000C E59F1150        ldr              r1,=IO1SET
   23 00000010 E5812000        str              r2,[r1]     ;Turn the LEDs off 
                                                            (Set bits)
   24 00000014 E59FB14C        ldr              r11, =SUM   ;Address in memory 
                                                            where we store our 
                                                            "stack"
   25 00000018         ;str r11, [r11]        ;???
   26 00000018 E3A0C000        mov              r12, #0     ;R12 - number we ar
                                                            e currently working
                                                             on
   27 0000001C         
   28 0000001C         
   29 0000001C         ;MAIN PROGRAM LOOP
   30 0000001C         ;
   31 0000001C         ;
   32 0000001C         ;
   33 0000001C         mainloop
   34 0000001C E3A00000        ldr              r0, =0
   35 00000020 EB00001F        bl               press       ;Poll to see if but
                                                            ton has been presse
                                                            d
   36 00000024         ;Comparison value for Increase Current Number
   37 00000024         ;ldr r0, =0x00100000
   38 00000024 E3500000        cmp              r0, #0      ;if(press() != notP
                                                            ressed)
   39 00000028 0A000002        beq              endSwitch
   40 0000002C E3500602        cmp              r0, #0x00200000 ;Comparison val



ARM Macro Assembler    Page 2 


                                                            ue for Decrease Cur
                                                            rent Number
   41 00000030 DA000001        ble              numberChange
   42 00000034 EA000002        b                operatorChange
   43 00000038         endSwitch
   44 00000038 EAFFFFF7        b                mainloop
   45 0000003C         
   46 0000003C         ;BRANCH AND LINK TO SUBROUTINES
   47 0000003C         ;Recuired as we need to branch and link
   48 0000003C         ;Can get rid of this by calculating offset with the pc
   49 0000003C         ;
   50 0000003C         numberChange
   51 0000003C         ;mov r1, r12
   52 0000003C EB000003        bl               numberChangeSub
   53 00000040 EAFFFFFC        b                endSwitch
   54 00000044         
   55 00000044         operatorChange
   56 00000044         ;mov r1, r12
   57 00000044 EB00000A        bl               operatorChangeSub
   58 00000048 EAFFFFFA        b                endSwitch
   59 0000004C         
   60 0000004C EAFFFFFE 
                       stop    B                stop
   61 00000050         
   62 00000050         ;numberChange Subroutine
   63 00000050         ;
   64 00000050         ;R0 - button pressed
   65 00000050         ;R12 - current number
   66 00000050         ;
   67 00000050         ;Increses or decreases the current sum based
   68 00000050         ;on the button pressed
   69 00000050         numberChangeSub
   70 00000050 E92D4000        stmfd            sp!, {lr}   ;Save link register
                                                             to stack
   71 00000054 E3500601        cmp              r0, #0x00100000 ;if(buttonPress
                                                            ed != '+')
   72 00000058 0A000001        beq              adding
   73 0000005C         ;subtracting
   74 0000005C E24CC001        sub              r12, r12, #1 ;currentNumber--
   75 00000060 EA000000        b                endNumberChange
   76 00000064         adding                               ;else if(buttonPres
                                                            sed == '-')
   77 00000064 E28CC001        add              r12, r12, #1 ;currentNumber++
   78 00000068         endNumberChange
   79 00000068 E1A0100C        mov              r1, r12
   80 0000006C EB000018        bl               updateDisplay
   81 00000070 E8BD8000        ldmfd            sp!, { pc}
   82 00000074         
   83 00000074         
   84 00000074         ;operatorChange Subroutine
   85 00000074         ;
   86 00000074         ;R0 - button pressed
   87 00000074         ;R12 - current number
   88 00000074         ;
   89 00000074         ;Adds a plus or minus to our stack based
   90 00000074         ;on the button pressed
   91 00000074         operatorChangeSub
   92 00000074 E92D4000        stmfd            sp!, {lr}
   93 00000078 E58BC000        str              r12, [r11]  ;Store current numb



ARM Macro Assembler    Page 3 


                                                            er to our "stack"
   94 0000007C E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress (full ascend
                                                            ing stack)
   95 00000080 E3500501        cmp              r0, #0x00400000 ;if(operator !=
                                                             '+')
   96 00000084 0A000002        beq              addition
   97 00000088         ;subtraction
   98 00000088 E3A0302D        ldr              r3, ='-'
   99 0000008C E58B3000        str              r3, [r11]   ;pushToStack('-')
  100 00000090 EA000001        b                endOpChange
  101 00000094         addition
  102 00000094 E3A0302B        ldr              r3, ='+'    ;else if(operator =
                                                            = '+')
  103 00000098 E58B3000        str              r3, [r11]   ;pushToStack('+')
  104 0000009C         endOpChange
  105 0000009C E28BB004        add              r11, r11, #4 ;Increment stack a
                                                            ddress
  106 000000A0 E8BD8000        ldmfd            sp!, { pc}
  107 000000A4         
  108 000000A4         ;press subroutine
  109 000000A4         ;polls the I/O pin register to see if a 
  110 000000A4         ;button has been pressed
  111 000000A4         press
  112 000000A4 E92D4000        stmfd            sp!, {lr}
  113 000000A8 E59F00BC        ldr              r0, =IO1PIN
  114 000000AC E5900000        ldr              r0, [r0]    ;Poll Pin Register
  115 000000B0 E3A0160F        ldr              r1, =0x00f00000 ;Mask for Butto
                                                            n bits
  116 000000B4 E0000001        and              r0, r0, r1  ;Mask out Button bi
                                                            ts
  117 000000B8 E1E00000        mvn              r0, r0      ;Invert all bits so
                                                             we can use button 
                                                            bits
  118 000000BC E0000001        and              r0, r0, r1  ;Mask out other bit
                                                            s we don't need
  119 000000C0 E8BD8000        ldmfd            sp!, {pc}
  120 000000C4         
  121 000000C4         ;clearDisplay subroutine
  122 000000C4         ;Turns off all LEDS
  123 000000C4         clearDisplay
  124 000000C4 E92D40FF        stmfd            sp!, {r0-r7, lr}
  125 000000C8 E59F1094        ldr              r1,=IO1SET
  126 000000CC E5810000        str              r0,[r1]     ;Turn the LEDs off
  127 000000D0 E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  128 000000D4         
  129 000000D4         ;updateDisplay subroutine
  130 000000D4         ;Updates the value displayed on the LEDS
  131 000000D4         updateDisplay
  132 000000D4 E92D40FF        stmfd            sp!, {r0-r7, lr}
  133 000000D8 E1A00801        mov              r0, r1, lsl #16 ;Shift currentN
                                                            umber to the correc
                                                            t position to mask
  134 000000DC EB00000F        bl               reverseNumber
  135 000000E0 E59F107C        ldr              r1,=IO1SET
  136 000000E4 E3A0280F        mov              r2, #0x000f0000
  137 000000E8 E5812000        str              r2,[r1]     ;Turn the LEDs off
  138 000000EC         
  139 000000EC E59F507C        ldr              r5,=50000   ;Value for delay



ARM Macro Assembler    Page 4 


  140 000000F0         dloop
  141 000000F0 E3550000        cmp              r5, #0
  142 000000F4 DA000001        ble              enddloop    ;while(delay > 0){
  143 000000F8 E2555001        subs             r5,r5,#1    ;   delay--
  144 000000FC EAFFFFFB        b                dloop       ;}
  145 00000100         enddloop
  146 00000100 E59F106C        ldr              r1,=IO1CLR
  147 00000104 E5810000        str              r0,[r1]     ;Turn on correct LE
                                                            D's
  148 00000108         
  149 00000108 E59F5068        ldr              r5,=5000000 ;Value for delay
  150 0000010C         dloop1
  151 0000010C E3550000        cmp              r5, #0
  152 00000110 DA000001        ble              enddloop1   ;while(delay > 0){
  153 00000114 E2555001        subs             r5,r5,#1    ;   delay--
  154 00000118 EAFFFFFB        b                dloop1      ;}
  155 0000011C         enddloop1
  156 0000011C E8BD80FF        ldmfd            sp!, {r0-r7, pc}
  157 00000120         
  158 00000120         ;Reverse Number Subroutine
  159 00000120         ;Reverses a 4 bit binary number placing it
  160 00000120         ;in the correct position to turn on LEDS
  161 00000120         ;
  162 00000120         ;R0 number being converted
  163 00000120         ;
  164 00000120         reverseNumber
  165 00000120 E92D41F8        stmfd            SP!, {lr, r3-r8} ; store regist
                                                            ers to stack
  166 00000124 E3A03000        ldr              r3, =0      ; count = 0
  167 00000128 E3A04000        ldr              r4, =0      ; reversed number 
  168 0000012C         reverse
  169 0000012C E3530024        cmp              r3, #36     ; while(count < num
                                                            ber of digits to re
                                                            verse){
  170 00000130 AA000008        bge              endreverse
  171 00000134 E2005001        and              r5, r0, #1  ; mask out least si
                                                            gnificant bit
  172 00000138 E1A000A0        mov              r0, r0, lsr #1 ; shift original
                                                             number right 1 bit
                                                            
  173 0000013C E1A04084        mov              r4, r4, lsl #1 ; shift reversed
                                                             number left 1 bit
  174 00000140 E3550001        cmp              r5, #1      ; if(masked bit == 
                                                            1){
  175 00000144 0A000000        beq              push1
  176 00000148 EA000000        b                endpush
  177 0000014C         push1
  178 0000014C E3844001        orr              r4, r4, #1  ; mask in a 1
  179 00000150         endpush
  180 00000150 E2833001        add              r3, r3, #1  ; count++
  181 00000154 EAFFFFF4        b                reverse
  182 00000158         endreverse
  183 00000158 E1A00004        mov              r0, r4
  184 0000015C E8BD81F8        ldmfd            SP!, {pc, r3-r8}
  185 00000160         
  186 00000160         
  187 00000160         
  188 00000160 E0028018 
              E0028014 



ARM Macro Assembler    Page 5 


              00000000 
              E0028010 
              0000C350 
              E002801C 
              004C4B40         AREA             DATA, READWRITE
  189 00000000         
  190 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    SUM     SPACE            50
  191 00000032         
  192 00000032                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
adding 00000064

Symbol: adding
   Definitions
      At line 76 in file App.s
   Uses
      At line 72 in file App.s
Comment: adding used once
addition 00000094

Symbol: addition
   Definitions
      At line 101 in file App.s
   Uses
      At line 96 in file App.s
Comment: addition used once
clearDisplay 000000C4

Symbol: clearDisplay
   Definitions
      At line 123 in file App.s
   Uses
      None
Comment: clearDisplay unused
dloop 000000F0

Symbol: dloop
   Definitions
      At line 140 in file App.s
   Uses
      At line 144 in file App.s
Comment: dloop used once
dloop1 0000010C

Symbol: dloop1
   Definitions
      At line 150 in file App.s
   Uses
      At line 154 in file App.s
Comment: dloop1 used once
endNumberChange 00000068

Symbol: endNumberChange
   Definitions
      At line 78 in file App.s
   Uses
      At line 75 in file App.s
Comment: endNumberChange used once
endOpChange 0000009C

Symbol: endOpChange



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 104 in file App.s
   Uses
      At line 100 in file App.s
Comment: endOpChange used once
endSwitch 00000038

Symbol: endSwitch
   Definitions
      At line 43 in file App.s
   Uses
      At line 39 in file App.s
      At line 53 in file App.s
      At line 58 in file App.s

enddloop 00000100

Symbol: enddloop
   Definitions
      At line 145 in file App.s
   Uses
      At line 142 in file App.s
Comment: enddloop used once
enddloop1 0000011C

Symbol: enddloop1
   Definitions
      At line 155 in file App.s
   Uses
      At line 152 in file App.s
Comment: enddloop1 used once
endpush 00000150

Symbol: endpush
   Definitions
      At line 179 in file App.s
   Uses
      At line 176 in file App.s
Comment: endpush used once
endreverse 00000158

Symbol: endreverse
   Definitions
      At line 182 in file App.s
   Uses
      At line 170 in file App.s
Comment: endreverse used once
mainloop 0000001C

Symbol: mainloop
   Definitions
      At line 33 in file App.s
   Uses
      At line 44 in file App.s
Comment: mainloop used once
numberChange 0000003C

Symbol: numberChange
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 50 in file App.s
   Uses
      At line 41 in file App.s
Comment: numberChange used once
numberChangeSub 00000050

Symbol: numberChangeSub
   Definitions
      At line 69 in file App.s
   Uses
      At line 52 in file App.s
Comment: numberChangeSub used once
operatorChange 00000044

Symbol: operatorChange
   Definitions
      At line 55 in file App.s
   Uses
      At line 42 in file App.s
Comment: operatorChange used once
operatorChangeSub 00000074

Symbol: operatorChangeSub
   Definitions
      At line 91 in file App.s
   Uses
      At line 57 in file App.s
Comment: operatorChangeSub used once
press 000000A4

Symbol: press
   Definitions
      At line 111 in file App.s
   Uses
      At line 35 in file App.s
Comment: press used once
push1 0000014C

Symbol: push1
   Definitions
      At line 177 in file App.s
   Uses
      At line 175 in file App.s
Comment: push1 used once
reverse 0000012C

Symbol: reverse
   Definitions
      At line 168 in file App.s
   Uses
      At line 181 in file App.s
Comment: reverse used once
reverseNumber 00000120

Symbol: reverseNumber
   Definitions
      At line 164 in file App.s
   Uses
      At line 134 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: reverseNumber used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 0000004C

Symbol: stop
   Definitions
      At line 60 in file App.s
   Uses
      At line 60 in file App.s
Comment: stop used once
updateDisplay 000000D4

Symbol: updateDisplay
   Definitions
      At line 131 in file App.s
   Uses
      At line 80 in file App.s
Comment: updateDisplay used once
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 188 in file App.s
   Uses
      None
Comment: DATA unused
SUM 00000000

Symbol: SUM
   Definitions
      At line 190 in file App.s
   Uses
      At line 24 in file App.s
Comment: SUM used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 17 in file App.s
   Uses
      At line 146 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 15 in file App.s
   Uses
      At line 19 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 14 in file App.s
   Uses
      At line 113 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 16 in file App.s
   Uses
      At line 22 in file App.s
      At line 125 in file App.s
      At line 135 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
367 symbols in table
