


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Assignment2, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000         ;Setup pin addresses
   11 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   12 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   13 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   14 00000000         
   15 00000000 E59F107C        ldr              r1,=IO1DIR
   16 00000004 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   17 00000008 E5812000        str              r2,[r1]     ;make them outputs
   18 0000000C E59F1074        ldr              r1,=IO1SET
   19 00000010 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   20 00000014 E59F2070        ldr              r2,=IO1CLR
   21 00000018         ; r1 points to the SET register
   22 00000018         ; r2 points to the CLEAR register
   23 00000018         
   24 00000018         ; ldr r5,=0x00100000 ; end when the mask reaches this va
                       lue
   25 00000018         ;wloop ldr r3,=0x00010000 ; start with P1.16.
   26 00000018         ;floop str r3,[r2]     ; clear the bit -> turn on the LE
                       D
   27 00000018         
   28 00000018         ;delay for about a half second
   29 00000018         ; ldr r4,=4000000
   30 00000018         ;dloop subs r4,r4,#1
   31 00000018         ; bne dloop
   32 00000018         
   33 00000018         ; str r3,[r1]  ;set the bit -> turn off the LED
   34 00000018         ; mov r3,r3,lsl #1 ;shift up to next bit. P1.16 -> P1.17
                        etc.
   35 00000018         ; cmp r3,r5
   36 00000018         ; bne floop
   37 00000018         ; b wloop
   38 00000018         
   39 00000018 E59F0070        ldr              r0, =0x0000101B
   40 0000001C E59F1070        ldr              r1, =ASCIIREPRESENTATION
   41 00000020 E59F2070        ldr              r2, =DIVISORTABLE
   42 00000024 EB000000        BL               getDecimal
   43 00000028         
   44 00000028         
   45 00000028         
   46 00000028 EAFFFFFE 
                       stop    B                stop
   47 0000002C         
   48 0000002C         
   49 0000002C         



ARM Macro Assembler    Page 2 


   50 0000002C         ;Convert to Decimal Subroutine
   51 0000002C         ;Converts a Unsigned interger to its decimal digits
   52 0000002C         ;and saves it in memory
   53 0000002C         ;
   54 0000002C         ;R0 - number being converted
   55 0000002C         ;R1 - memory address of space for decimal digits
   56 0000002C         ;R2 - memory address of divisor table
   57 0000002C         ;
   58 0000002C         
   59 0000002C         getDecimal
   60 0000002C E92D41F8        stmfd            SP!, {lr, r3-r8} ; Store regist
                                                            ers to stack
   61 00000030         
   62 00000030         ;take care of plus or minus
   63 00000030         ;convert number to unsigned representation if required
   64 00000030         ;account for overflow when converting a max signed to un
                       signed
   65 00000030         
   66 00000030 E3A04000        ldr              r4, =0      ; Divisor table ind
                                                            ex = 0;
   67 00000034         for
   68 00000034 E354000A        cmp              r4, #10     ; for(index < divis
                                                            orTable.length){
   69 00000038 AA00000E        bge              endfor
   70 0000003C E5923000        ldr              r3, [r2]    ; load value at div
                                                            isor table
   71 00000040         if1
   72 00000040 E1500003        cmp              r0, r3      ; if(numberBeingCon
                                                            verted >= divisor){
                                                            
   73 00000044 BA000008        blt              endif1
   74 00000048 E3A05000        ldr              r5, =0      ; digitCount = 0;
   75 0000004C         while
   76 0000004C E1500003        cmp              r0, r3      ; while(numberBeing
                                                            Converted >= diviso
                                                            r){
   77 00000050 BA000002        blt              endwh
   78 00000054 E0400003        sub              r0, r0, r3  ; numberBeingConver
                                                            ted -= divisor
   79 00000058 E2855001        add              r5, r5, #1  ; digitCount++
   80 0000005C EAFFFFFA        b                while
   81 00000060         endwh
   82 00000060         ;put decimal number into memory
   83 00000060 E5815000        str              r5, [r1]    ; store digit to me
                                                            mory space
   84 00000064 E3A05000        ldr              r5, =0      ; digitCount = 0
   85 00000068 E2811004        add              r1, r1, #4  ; digitAddress++
   86 0000006C         endif1
   87 0000006C E2844001        add              r4, r4, #1  ; index++
   88 00000070 E2822004        add              r2, r2, #4  ; divisorTableAddre
                                                            ss++
   89 00000074 EAFFFFEE        b                for
   90 00000078         endfor
   91 00000078         ;terminate the string
   92 00000078 E3E05000        ldr              r5, =-1     ; load -1 as termin
                                                            ating character   
   93 0000007C E5815000        str              r5, [r1]    ; store to digitAdd
                                                            ress
   94 00000080 E8BD81F8        ldmfd            SP!, {pc, r3-r8}



ARM Macro Assembler    Page 3 


   95 00000084         
   96 00000084 E0028018 
              E0028014 
              E002801C 
              0000101B 
              00000000 
              00000000         AREA             Table, DATA, READONLY
   97 00000000         
   98 00000000         DIVISORTABLE
   99 00000000 3B9ACA00        DCD              1000000000
  100 00000004 05F5E100        DCD              100000000
  101 00000008 00989680        DCD              10000000
  102 0000000C 000F4240        DCD              1000000
  103 00000010 000186A0        DCD              100000
  104 00000014 00002710        DCD              10000
  105 00000018 000003E8        DCD              1000
  106 0000001C 00000064        DCD              100
  107 00000020 0000000A        DCD              10
  108 00000024 00000001        DCD              1
  109 00000028         
  110 00000028                 AREA             AsciiConversion, READWRITE
  111 00000000         
  112 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 ASCIIREPRESENTATION
                               SPACE            12
  113 0000000C         
  114 0000000C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Assignment2 00000000

Symbol: Assignment2
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: Assignment2 unused
endfor 00000078

Symbol: endfor
   Definitions
      At line 90 in file App.s
   Uses
      At line 69 in file App.s
Comment: endfor used once
endif1 0000006C

Symbol: endif1
   Definitions
      At line 86 in file App.s
   Uses
      At line 73 in file App.s
Comment: endif1 used once
endwh 00000060

Symbol: endwh
   Definitions
      At line 81 in file App.s
   Uses
      At line 77 in file App.s
Comment: endwh used once
for 00000034

Symbol: for
   Definitions
      At line 67 in file App.s
   Uses
      At line 89 in file App.s
Comment: for used once
getDecimal 0000002C

Symbol: getDecimal
   Definitions
      At line 59 in file App.s
   Uses
      At line 42 in file App.s
Comment: getDecimal used once
if1 00000040

Symbol: if1
   Definitions
      At line 71 in file App.s
   Uses
      None
Comment: if1 unused
start 00000000

Symbol: start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 00000028

Symbol: stop
   Definitions
      At line 46 in file App.s
   Uses
      At line 46 in file App.s
Comment: stop used once
while 0000004C

Symbol: while
   Definitions
      At line 75 in file App.s
   Uses
      At line 80 in file App.s
Comment: while used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIVISORTABLE 00000000

Symbol: DIVISORTABLE
   Definitions
      At line 98 in file App.s
   Uses
      At line 41 in file App.s
Comment: DIVISORTABLE used once
Table 00000000

Symbol: Table
   Definitions
      At line 96 in file App.s
   Uses
      None
Comment: Table unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASCIIREPRESENTATION 00000000

Symbol: ASCIIREPRESENTATION
   Definitions
      At line 112 in file App.s
   Uses
      At line 40 in file App.s
Comment: ASCIIREPRESENTATION used once
AsciiConversion 00000000

Symbol: AsciiConversion
   Definitions
      At line 110 in file App.s
   Uses
      None
Comment: AsciiConversion unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 13 in file App.s
   Uses
      At line 20 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 11 in file App.s
   Uses
      At line 15 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 12 in file App.s
   Uses
      At line 18 in file App.s
Comment: IO1SET used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
353 symbols in table
